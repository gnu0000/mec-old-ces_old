/*--------------------------------------------------------------------------+
|                                                                           |
|       Copyright (c) 1992 by AASHTO.  All Rights Reserved.                 |
|                                                                           |
|       This program module is part of BAMS/CES, a module of BAMS,          |
|       The American Association of State Highway and Transportation        |
|       Officials' (AASHTO) Information System for Managing Transportation  |
|       Programs, a proprietary product of AASHTO, no part of which may be  |
|       reproduced or transmitted in any form or by any means, electronic,  |
|       mechanical, or otherwise, including photocopying and recording      |
|       or in connection with any information storage or retrieval          |
|       system, without permission in writing from AASHTO.                  |
|                                                                           |
+--------------------------------------------------------------------------*/


/*
 * dssimp.met
 * This file contains the metadata for the
 * dss import module.
 */


#include "..\include\itiwin.h"
#include "..\include\winid.h"
#include "..\include\metadecl.h"
#include "dssimp.h"

:query impquery.bin
//
// Window ID            Query String
//----------------------------------------------------------------------------------------------------------------



UPDATEJOBQUAN, " UPDATE JobItem SET Quantity ="
UPDATEJOBQUAN,  " (SELECT SUM (PI.Quantity)  "
UPDATEJOBQUAN,    " FROM  JobItemProjectItem JIPI, ProjectItem PI"
UPDATEJOBQUAN,    " WHERE JIPI.JobKey     = JobItem.JobKey"
UPDATEJOBQUAN,      " AND JIPI.JobItemKey = JobItem.JobItemKey"
UPDATEJOBQUAN,      " AND PI.ProjectControlNumber = JIPI.ProjectControlNumber"
UPDATEJOBQUAN,      " AND PI.SequenceNumber = JIPI.SequenceNumber"
UPDATEJOBQUAN,      " AND PI.Category = JIPI.Category)"
UPDATEJOBQUAN, " WHERE JobItem.JobKey = %JobKey"
UPDATEJOBQUAN, " UPDATE JobItem SET ExtendedAmount = UnitPrice * Quantity"
UPDATEJOBQUAN, " WHERE JobItem.JobKey = %JobKey"






LISTBADJOBITEMS,        " SELECT JI.JobKey, JI.JobItemKey"
LISTBADJOBITEMS,        " FROM %ProductionDatabase..JobItem JI"
LISTBADJOBITEMS,        " WHERE JI.JobKey = %Key1"
LISTBADJOBITEMS,        " AND JI.JobItemKey NOT IN"
LISTBADJOBITEMS,        " (SELECT JIPI.JobItemKey"
LISTBADJOBITEMS,         " FROM %ProductionDatabase..JobItemProjectItem JIPI, "
LISTBADJOBITEMS,         " %ProductionDatabase..ProjectItem PI,"
LISTBADJOBITEMS,         " %ProductionDatabase..JobItem JI"
LISTBADJOBITEMS,         " WHERE JIPI.JobKey = %Key1"
LISTBADJOBITEMS,         " AND JIPI.ProjectControlNumber = PI.ProjectControlNumber"
LISTBADJOBITEMS,         " AND JIPI.Category = PI.Category"
LISTBADJOBITEMS,         " AND JIPI.SequenceNumber = PI.SequenceNumber"
LISTBADJOBITEMS,         " AND JIPI.JobItemKey = JI.JobItemKey"
LISTBADJOBITEMS,         " AND JI.StandardItemKey = PI.StandardItemKey)"

DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobItem WHERE JobItemKey = %LoopKey2 AND JobKey = %LoopKey1"
DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobItemProjectItem WHERE JobItemKey = %LoopKey2 AND JobKey = %LoopKey1"
DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobCostBasedEstimate WHERE JobItemKey = %LoopKey2 AND JobKey = %LoopKey1"
DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobCrewUsed WHERE JobCostSheetKey IN (SELECT JobCostSheetKey FROM %ProductionDatabase..JobCostSheet WHERE JobItemKey = %LoopKey2) AND JobKey = %LoopKey1"
DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobCrewEquipmentUsed WHERE JobCostSheetKey IN (SELECT JobCostSheetKey FROM %ProductionDatabase..JobCostSheet WHERE JobItemKey = %LoopKey2) AND JobKey = %LoopKey1"
DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobCrewLaborUsed WHERE JobCostSheetKey IN (SELECT JobCostSheetKey FROM %ProductionDatabase..JobCostSheet WHERE JobItemKey = %LoopKey2) AND JobKey = %LoopKey1"
DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobMaterialUsed WHERE JobCostSheetKey IN (SELECT JobCostSheetKey FROM %ProductionDatabase..JobCostSheet WHERE JobItemKey = %LoopKey2) AND JobKey = %LoopKey1"
DELETEJOBITEMS,         " DELETE FROM %ProductionDatabase..JobCostSheet WHERE JobItemKey = %LoopKey2 AND JobKey = %LoopKey1"


LISTBADJOBPROJITEMS,    " SELECT JobKey, JobItemKey, ProjectControlNumber, "
LISTBADJOBPROJITEMS,    " Category, SequenceNumber"
LISTBADJOBPROJITEMS,    " FROM %ProductionDatabase..JobItemProjectItem JIPI"
LISTBADJOBPROJITEMS,    " WHERE JIPI.JobKey = %Key1"
LISTBADJOBPROJITEMS,    " AND (JIPI.JobItemKey NOT IN"
LISTBADJOBPROJITEMS,    " (SELECT JobItemKey"
LISTBADJOBPROJITEMS,    "  FROM %ProductionDatabase..JobItem"
LISTBADJOBPROJITEMS,    "  WHERE JobKey = %Key1)"
LISTBADJOBPROJITEMS,    " OR JIPI.SequenceNumber NOT IN"
LISTBADJOBPROJITEMS,    " (SELECT PI.SequenceNumber"
LISTBADJOBPROJITEMS,    "  FROM %ProductionDatabase..ProjectItem PI"
LISTBADJOBPROJITEMS,    "  WHERE PI.ProjectControlNumber = JIPI.ProjectControlNumber"
LISTBADJOBPROJITEMS,    " AND PI.Category = JIPI.Category))"

DELETEJOBPROJITEMS,     " DELETE FROM %ProductionDatabase..JobItemProjectItem"
DELETEJOBPROJITEMS,     " WHERE JobKey = %LoopKey1"
DELETEJOBPROJITEMS,     " AND JobItemKey = %LoopKey2"
DELETEJOBPROJITEMS,     " AND ProjectControlNumber = '%LoopKey3'"
DELETEJOBPROJITEMS,     " AND Category = '%LoopKey4'"
DELETEJOBPROJITEMS,     " AND SequenceNumber = '%LoopKey5'"


LISTNEWJOBITEMS,        " SELECT %Key1, PI.StandardItemKey, PI.UnitPrice,"
LISTNEWJOBITEMS,        " PI.ProjectControlNumber, PI.Category,"
LISTNEWJOBITEMS,        " PI.SequenceNumber"
LISTNEWJOBITEMS,        " FROM ProjectItem PI"
LISTNEWJOBITEMS,        " WHERE PI.StandardItemKey IS NOT NULL" 
LISTNEWJOBITEMS,        " AND PI.SequenceNumber NOT IN"
LISTNEWJOBITEMS,        " (SELECT JIPI.SequenceNumber"
LISTNEWJOBITEMS,        "  FROM %ProductionDatabase..JobItemProjectItem JIPI"
LISTNEWJOBITEMS,        "  WHERE JIPI.JobKey = %Key1"
LISTNEWJOBITEMS,        "  AND JIPI.Category = PI.Category"
LISTNEWJOBITEMS,        "  AND JIPI.ProjectControlNumber = PI.ProjectControlNumber"
LISTNEWJOBITEMS,        "  AND JIPI.SequenceNumber = PI.SequenceNumber)"

GETJOBKEYS,             " SELECT JB.JobKey, JB.JobBreakdownKey,"
GETJOBKEYS,             " JAG.JobAlternateGroupKey, JAG.ChosenAlternateKey,"
GETJOBKEYS,             " IEM.ItemEstimationMethodKey"
GETJOBKEYS,             " FROM %ProductionDatabase..JobBreakdown JB, "
GETJOBKEYS,             " %ProductionDatabase..JobAlternateGroup JAG,"
GETJOBKEYS,             " %ProductionDatabase..ItemEstimationMethod IEM,"

GETJOBKEYS,             " %ProductionDatabase..JobProject JP"

GETJOBKEYS,             " WHERE IEM.EstimationMethodAbbreviation = 'AdH'"
GETJOBKEYS,             " AND JB.JobKey = %JobKey"
GETJOBKEYS,             " AND JAG.JobKey = %JobKey"

GETJOBKEYS,             " AND JP.ProjectControlNumber = '%ProjectControlNumber'"
GETJOBKEYS,             " AND JP.JobKey = %JobKey "

GETJOBKEYS,             " ORDER BY JB.JobBreakdownKey,"
GETJOBKEYS,             " JAG.JobAlternateGroupKey "

INSERTJOBITEMS,         " INSERT INTO %ProductionDatabase..JobItem"
INSERTJOBITEMS,         " (JobKey, JobBreakdownKey, "
INSERTJOBITEMS,         " JobItemKey, StandardItemKey,"
INSERTJOBITEMS,         " JobAlternateGroupKey, JobAlternateKey,"
INSERTJOBITEMS,         " Quantity, UnitPrice,"
INSERTJOBITEMS,         " ExtendedAmount, ItemEstimationMethodKey,"
INSERTJOBITEMS,         " LongEstimationComment, SupplementalDescription,"
INSERTJOBITEMS,         " Duration, DaysElapsedBeforeStart,"
INSERTJOBITEMS,         " Slack)"
INSERTJOBITEMS,         " VALUES"
INSERTJOBITEMS,         " (%JobKey, %JobBreakdownKey,"
INSERTJOBITEMS,          " %JobItemKey, %StandardItemKey," 
INSERTJOBITEMS,          " %JobAlternateGroupKey, %JobAlternateKey,"
INSERTJOBITEMS,          " 0, %UnitPrice,"
INSERTJOBITEMS,          " 0, %ItemEstimationMethodKey, "
INSERTJOBITEMS,          " 0, '',"
INSERTJOBITEMS,          " 0, 0,"
INSERTJOBITEMS,          " 0)"

INSERTJOBPROJITEMS,     " INSERT INTO %ProductionDatabase..JobItemProjectItem"
INSERTJOBPROJITEMS,     " (JobKey, JobItemKey, ProjectControlNumber,"
INSERTJOBPROJITEMS,     " Category, SequenceNumber)"
INSERTJOBPROJITEMS,     " VALUES"
INSERTJOBPROJITEMS,     " (%JobKey, %JobItemKey, '%ProjectControlNumber',"
INSERTJOBPROJITEMS,     " '%Category', '%SequenceNumber')"

COPYPESPROJECT,         " INSERT INTO %ProductionDatabase..Project"
COPYPESPROJECT,         " (ProjectControlNumber,Description,SpecYear,"
COPYPESPROJECT,         " WorkType,District,Location)"
COPYPESPROJECT,         " SELECT ProjectControlNumber,Description,SpecYear,"
COPYPESPROJECT,         " WorkType,District,Location"
COPYPESPROJECT,         " FROM Project"
COPYPESPROJECT,         " WHERE WorkType IS NOT NULL"
COPYPESPROJECT,         " AND District IS NOT NULL"
COPYPESPROJECT,         " AND ProjectControlNumber IN"
COPYPESPROJECT,         " (SELECT ProjectControlNumber"
COPYPESPROJECT,         "  FROM %ProductionDatabase..JobProject)"

COPYCATEGORY,           " INSERT INTO %ProductionDatabase..ProjectCategory"
COPYCATEGORY,           " (ProjectControlNumber,Category)"
COPYCATEGORY,           " SELECT ProjectControlNumber,Category"
COPYCATEGORY,           " FROM ProjectCategory"
COPYCATEGORY,           " WHERE ProjectControlNumber IN"
COPYCATEGORY,           " (SELECT ProjectControlNumber"
COPYCATEGORY,           "  FROM %ProductionDatabase..JobProject)"

COPYPROJITEM,           " INSERT INTO %ProductionDatabase..ProjectItem"
COPYPROJITEM,           " (ProjectControlNumber,Category,SequenceNumber,"
COPYPROJITEM,           " StandardItemKey,Quantity,UnitPrice,"
COPYPROJITEM,           " SupplementalDescription,ExtendedAmount)"
COPYPROJITEM,           " SELECT ProjectControlNumber,Category,SequenceNumber,"
COPYPROJITEM,           " StandardItemKey,Quantity,UnitPrice,"
COPYPROJITEM,           " SupplementalDescription,ExtendedAmount"
COPYPROJITEM,           " FROM ProjectItem"
COPYPROJITEM,           " WHERE StandardItemKey IS NOT NULL"
COPYPROJITEM,           " AND ProjectControlNumber IN"
COPYPROJITEM,           " (SELECT ProjectControlNumber"
COPYPROJITEM,           "  FROM %ProductionDatabase..JobProject)"

COPYBIDDER,             "INSERT INTO %ProductionDatabase..HistoricalBidder "
COPYBIDDER,             "(ProposalKey, VendorKey, BidTotal) "
COPYBIDDER,             "SELECT DISTINCT ProposalKey, VendorKey, BidTotal "
COPYBIDDER,             "FROM HistoricalBidder "
COPYBIDDER,             "WHERE ProposalKey IS NOT NULL "
COPYBIDDER,             "AND VendorKey IS NOT NULL "
COPYBIDDER,             "AND BidTotal IS NOT NULL "

COPYBIDDER+INDV_SELECT,  "SELECT DISTINCT '%ProductionDatabase',"
COPYBIDDER+INDV_SELECT,  " ProposalKey, VendorKey, BidTotal "
COPYBIDDER+INDV_SELECT,  " FROM HistoricalBidder "
COPYBIDDER+INDV_SELECT,  " WHERE ProposalKey = %ProposalKey "
COPYBIDDER+INDV_SELECT,  " AND VendorKey IS NOT NULL "
COPYBIDDER+INDV_SELECT,  " AND BidTotal IS NOT NULL "

COPYBIDDER+INDV_INSERT, "INSERT INTO %ProductionDatabase..HistoricalBidder "
COPYBIDDER+INDV_INSERT,         "(ProposalKey,  VendorKey,  BidTotal) "
COPYBIDDER+INDV_INSERT, "VALUES (%ProposalKey, %VendorKey, %BidTotal) "


COPYFACILITYMATERIAL,   "INSERT INTO %ProductionDatabase..FacilityMaterial "
COPYFACILITYMATERIAL,   "(VendorKey, FacilityNumber, MaterialKey, "
COPYFACILITYMATERIAL,   "Capacity, ProductionMethod, StateApproved) "
COPYFACILITYMATERIAL,   "SELECT VendorKey, FacilityNumber, MaterialKey, "
COPYFACILITYMATERIAL,   "Capacity, ProductionMethod, StateApproved "
COPYFACILITYMATERIAL,   "FROM FacilityMaterial "
COPYFACILITYMATERIAL,   "WHERE VendorKey IS NOT NULL "
COPYFACILITYMATERIAL,   "AND MaterialKey IS NOT NULL "
COPYFACILITYMATERIAL,   "AND ProductionMethod IS NOT NULL "

COPYITEMBID,            "INSERT INTO %ProductionDatabase..HistoricalItemBid "
COPYITEMBID,            "(ProposalKey, ProposalItemKey, VendorKey, "
COPYITEMBID,            "UnitPrice, LowCostAlternate) "
COPYITEMBID,            "SELECT ProposalKey, ProposalItemKey, VendorKey, "
COPYITEMBID,            "UnitPrice, LowCostAlternate "
COPYITEMBID,            "FROM HistoricalItemBid "
COPYITEMBID,            "WHERE ProposalKey IS NOT NULL "
COPYITEMBID,            "AND ProposalItemKey IS NOT NULL "
COPYITEMBID,            "AND VendorKey IS NOT NULL "
COPYITEMBID,            "AND ProposalKey != 0 "
COPYITEMBID,            "AND ProposalItemKey != 0 "
COPYITEMBID,            "AND VendorKey != 0 "

COPYITEMBID+INDV_SELECT, " /* COPYITEMBID */ "
COPYITEMBID+INDV_SELECT, "SELECT '%ProductionDatabase', "
COPYITEMBID+INDV_SELECT, "ProposalKey, ProposalItemKey, VendorKey, "
COPYITEMBID+INDV_SELECT, "UnitPrice, LowCostAlternate "
COPYITEMBID+INDV_SELECT, "FROM HistoricalItemBid "
COPYITEMBID+INDV_SELECT, "WHERE ProposalItemKey IS NOT NULL "
COPYITEMBID+INDV_SELECT, "AND VendorKey IS NOT NULL "
COPYITEMBID+INDV_SELECT, "AND ProposalKey = %ProposalKey "
COPYITEMBID+INDV_SELECT, "AND ProposalItemKey != 0 "
COPYITEMBID+INDV_SELECT, "AND VendorKey != 0 "

COPYITEMBID+INDV_INSERT, "INSERT INTO %ProductionDatabase..HistoricalItemBid "
COPYITEMBID+INDV_INSERT, "(ProposalKey, ProposalItemKey, VendorKey, "
COPYITEMBID+INDV_INSERT, "UnitPrice, LowCostAlternate) "
COPYITEMBID+INDV_INSERT, " VALUES "
COPYITEMBID+INDV_INSERT, "(%ProposalKey, %ProposalItemKey, %VendorKey, "
COPYITEMBID+INDV_INSERT,  "%UnitPrice, %LowCostAlternate) "


COPYPROJECT,            "INSERT INTO %ProductionDatabase..HistoricalProject "
COPYPROJECT,            "(ProjectKey, ProjectControlNumber, Description, "
COPYPROJECT,            "ProposalKey, SpecYear, WorkType, District,  "
COPYPROJECT,            "UrbanRuralClass, Location, AwardedAmount, "
COPYPROJECT,            "LowBidAmount, EstimatedAmount, Length, Width) "
COPYPROJECT,            "SELECT ProjectKey, ProjectControlNumber, Description, "
COPYPROJECT,            "ProposalKey, SpecYear, WorkType, District,  "
COPYPROJECT,            "UrbanRuralClass, Location, AwardedAmount, "
COPYPROJECT,            "LowBidAmount, EstimatedAmount, Length, Width "
COPYPROJECT,            "FROM HistoricalProject "
COPYPROJECT,            "WHERE ProjectKey IS NOT NULL "
COPYPROJECT,            "AND ProposalKey IS NOT NULL "
COPYPROJECT,            "AND WorkType IS NOT NULL "
COPYPROJECT,            "AND District IS NOT NULL "
COPYPROJECT,            "AND UrbanRuralClass IS NOT NULL " 

                                  
COPYPROJECT+INDV_SELECT, " /* COPYPROJECT */ "
COPYPROJECT+INDV_SELECT, "SELECT '%ProductionDatabase', "
COPYPROJECT+INDV_SELECT, "ProposalKey, ProjectControlNumber, Description, "
COPYPROJECT+INDV_SELECT, "ProjectKey, SpecYear, WorkType, District,  "
COPYPROJECT+INDV_SELECT, "UrbanRuralClass, Location, AwardedAmount, "
COPYPROJECT+INDV_SELECT, "LowBidAmount, EstimatedAmount, Length, Width "
COPYPROJECT+INDV_SELECT, "FROM HistoricalProject "
COPYPROJECT+INDV_SELECT, "WHERE ProjectKey IS NOT NULL "
COPYPROJECT+INDV_SELECT, "AND ProposalKey = %ProposalKey "
COPYPROJECT+INDV_SELECT, "AND WorkType IS NOT NULL "
COPYPROJECT+INDV_SELECT, "AND District IS NOT NULL "
COPYPROJECT+INDV_SELECT, "AND UrbanRuralClass IS NOT NULL " 


COPYPROJECT+INDV_INSERT, "INSERT INTO %ProductionDatabase..HistoricalProject "
COPYPROJECT+INDV_INSERT, "(ProposalKey, ProjectControlNumber, "
COPYPROJECT+INDV_INSERT, "Description, "
COPYPROJECT+INDV_INSERT, "ProjectKey, SpecYear, WorkType, District,  "
COPYPROJECT+INDV_INSERT, "UrbanRuralClass, Location, AwardedAmount, "
COPYPROJECT+INDV_INSERT, "LowBidAmount, EstimatedAmount, Length, Width) "
COPYPROJECT+INDV_INSERT, " VALUES "
COPYPROJECT+INDV_INSERT, "(%ProposalKey, '%ProjectControlNumber', "
COPYPROJECT+INDV_INSERT, " '%Description', "
COPYPROJECT+INDV_INSERT, "%ProjectKey, %SpecYear, %WorkType, %District,  "
COPYPROJECT+INDV_INSERT, "%UrbanRuralClass, 0x%Location, %AwardedAmount, "
COPYPROJECT+INDV_INSERT, "%LowBidAmount, %EstimatedAmount, %Length, %Width) "

  

COPYPROJECTCATEGORY,    "INSERT INTO %ProductionDatabase..HistoricalProjectCategory "
COPYPROJECTCATEGORY,    "(ProjectKey, CategoryNumber, Description, Length, "
COPYPROJECTCATEGORY,    "Width, Structure, StructureID, StructureLength, "
COPYPROJECTCATEGORY,    "StructureWidth, StructureType) "
COPYPROJECTCATEGORY,    "SELECT ProjectKey, CategoryNumber, Description, Length, "
COPYPROJECTCATEGORY,    "Width, Structure, StructureID, StructureLength, "
COPYPROJECTCATEGORY,    "StructureWidth, StructureType "
COPYPROJECTCATEGORY,    "FROM HistoricalProjectCategory "
COPYPROJECTCATEGORY,    "WHERE ProjectKey IS NOT NULL "
COPYPROJECTCATEGORY,    "AND StructureType IS NOT NULL "
COPYPROJECTCATEGORY,    "AND ProjectKey !=0 "

COPYPROJECTCATEGORY+INDV_SELECT, " /* COPYPROJECTCATEGORY */ "
COPYPROJECTCATEGORY+INDV_SELECT, "SELECT '%ProductionDatabase', "
COPYPROJECTCATEGORY+INDV_SELECT, "ProjectKey, CategoryNumber, Description, Length, "
COPYPROJECTCATEGORY+INDV_SELECT, "Width, Structure, StructureID, StructureLength, "
COPYPROJECTCATEGORY+INDV_SELECT, "StructureWidth, StructureType "
COPYPROJECTCATEGORY+INDV_SELECT, ", '%ProposalKey' "
COPYPROJECTCATEGORY+INDV_SELECT, "FROM HistoricalProjectCategory "
COPYPROJECTCATEGORY+INDV_SELECT, "WHERE StructureType IS NOT NULL "
COPYPROJECTCATEGORY+INDV_SELECT, "AND ProjectKey IN "
COPYPROJECTCATEGORY+INDV_SELECT, "(SELECT ProjectKey FROM HistoricalProject"
COPYPROJECTCATEGORY+INDV_SELECT,  " WHERE ProposalKey = %ProposalKey ) "

COPYPROJECTCATEGORY+INDV_INSERT, "INSERT INTO %ProductionDatabase..HistoricalProjectCategory "
COPYPROJECTCATEGORY+INDV_INSERT, "(ProjectKey, CategoryNumber, Description, Length, "
COPYPROJECTCATEGORY+INDV_INSERT, "Width, Structure, StructureID, StructureLength, "
COPYPROJECTCATEGORY+INDV_INSERT, "StructureWidth, StructureType) "
COPYPROJECTCATEGORY+INDV_INSERT, " VALUES "
COPYPROJECTCATEGORY+INDV_INSERT, "(%ProjectKey, '%CategoryNumber', '%Description', %Length, "
COPYPROJECTCATEGORY+INDV_INSERT, "%Width, %Structure, '%StructureID', %StructureLength, "
COPYPROJECTCATEGORY+INDV_INSERT, "%StructureWidth, %StructureType) /*  for ProposalKey: %ProposalKey */  "



COPYPROJECTITEM+INDV_SELECT, "/* COPYPROJECTITEM */ "
COPYPROJECTITEM+INDV_SELECT, "SELECT '%ProductionDatabase', "
COPYPROJECTITEM+INDV_SELECT, " '%ProposalKey', ProjectKey, CategoryNumber, SequenceNumber, "
COPYPROJECTITEM+INDV_SELECT, "ProposalItemKey, ItemKey, Quantity "
COPYPROJECTITEM+INDV_SELECT, "FROM HistoricalProjectItem "
COPYPROJECTITEM+INDV_SELECT, "WHERE ProjectKey IN "
COPYPROJECTITEM+INDV_SELECT, "(SELECT ProjectKey FROM HistoricalProject"
COPYPROJECTITEM+INDV_SELECT,  " WHERE ProposalKey = %ProposalKey ) "
COPYPROJECTITEM+INDV_SELECT, "AND ProposalItemKey IS NOT NULL "
COPYPROJECTITEM+INDV_SELECT, "AND ItemKey IS NOT NULL "

COPYPROJECTITEM+INDV_INSERT, "INSERT INTO %ProductionDatabase..HistoricalProjectItem "
COPYPROJECTITEM+INDV_INSERT, " /* for ProposalKey: %ProposalKey */ "
COPYPROJECTITEM+INDV_INSERT, "(ProjectKey, CategoryNumber, SequenceNumber, "
COPYPROJECTITEM+INDV_INSERT, "ProposalItemKey, ItemKey, Quantity) "
COPYPROJECTITEM+INDV_INSERT, " VALUES "
COPYPROJECTITEM+INDV_INSERT, "(%ProjectKey, '%CategoryNumber', '%SequenceNumber', "
COPYPROJECTITEM+INDV_INSERT, "%ProposalItemKey, %ItemKey, %Quantity) "

COPYPROJECTITEM,        "INSERT INTO %ProductionDatabase..HistoricalProjectItem "
COPYPROJECTITEM,        "(ProjectKey, CategoryNumber, SequenceNumber,  "
COPYPROJECTITEM,        "ProposalItemKey, ItemKey, Quantity) "
COPYPROJECTITEM,        "SELECT ProjectKey, CategoryNumber, SequenceNumber, "
COPYPROJECTITEM,        "ProposalItemKey, ItemKey, Quantity "
COPYPROJECTITEM,        "FROM HistoricalProjectItem "
COPYPROJECTITEM,        "WHERE ProjectKey IS NOT NULL "
COPYPROJECTITEM,        "AND ProposalItemKey IS NOT NULL "
COPYPROJECTITEM,        "AND ItemKey IS NOT NULL "



COPYPROPOSAL,           "/* Fix */ UPDATE HistoricalProposal"
COPYPROPOSAL,           " SET LowBidderKey = AwardedBidderKey"
COPYPROPOSAL,           " WHERE LowBidderKey IS NULL "
COPYPROPOSAL,           "/* COPYPROPOSAL */ "
COPYPROPOSAL,           "INSERT INTO %ProductionDatabase..HistoricalProposal "
COPYPROPOSAL,           "(ProposalKey, ProposalID, Description, "
COPYPROPOSAL,           "ProjectNumber, Location, LocationDescription, "
COPYPROPOSAL,           "SpecYear, District, CountyID, CountyName, "
COPYPROPOSAL,           "ImportDate, WorkType, RoadType, LettingDate, "
COPYPROPOSAL,           "LowBidderKey, AwardedBidderKey, NumberOfBids, "
COPYPROPOSAL,           "LowBidTotal, AwardedBidTotal, EngineersEstimate, "
COPYPROPOSAL,           "DateComplete, Status, PercentComplete, RejectedFlag, "
COPYPROPOSAL,           "Reason, AveragePavementDepth, AveragePavementWidth, "
COPYPROPOSAL,           "ProposalLength) "
COPYPROPOSAL,           "SELECT ProposalKey, ProposalID, Description, "
COPYPROPOSAL,           "ProjectNumber, Location, LocationDescription, "
COPYPROPOSAL,           "SpecYear, District, CountyID, CountyName, "
COPYPROPOSAL,           "%TodaysDate, WorkType, RoadType, LettingDate, "
COPYPROPOSAL,           "LowBidderKey, AwardedBidderKey, NumberOfBids, "
COPYPROPOSAL,           "LowBidTotal, AwardedBidTotal, EngineersEstimate, "
COPYPROPOSAL,           "DateComplete, Status, (PercentComplete / 100.0), RejectedFlag, "
COPYPROPOSAL,           "Reason, AveragePavementDepth, AveragePavementWidth, "
COPYPROPOSAL,           "ProposalLength "
COPYPROPOSAL,           "FROM HistoricalProposal "
COPYPROPOSAL,           "WHERE ProposalKey IS NOT NULL "
COPYPROPOSAL,           "AND District IS NOT NULL "
COPYPROPOSAL,           "AND WorkType IS NOT NULL "
COPYPROPOSAL,           "AND RoadType IS NOT NULL "
COPYPROPOSAL,           "AND CountyName IS NOT NULL "
COPYPROPOSAL,           "AND LowBidderKey IS NOT NULL "
COPYPROPOSAL,           "AND AwardedBidderKey IS NOT NULL "
COPYPROPOSAL,           "AND Status IS NOT NULL "
COPYPROPOSAL,           "AND Reason IS NOT NULL "



COPYPROPOSAL+INDV_INSERT, " /* dssimp.met COPYPROPOSAL+INDV_INSERT */ "
COPYPROPOSAL+INDV_INSERT, "IF NOT EXISTS (SELECT ProposalID FROM "
COPYPROPOSAL+INDV_INSERT,         "%ProductionDatabase..HistoricalProposal "
COPYPROPOSAL+INDV_INSERT,         "WHERE ProposalID = '%ProposalID' )"

COPYPROPOSAL+INDV_INSERT, "INSERT INTO %ProductionDatabase..HistoricalProposal "
COPYPROPOSAL+INDV_INSERT, "(ImportDate, ProposalKey, ProposalID, "
COPYPROPOSAL+INDV_INSERT, "Description, "
COPYPROPOSAL+INDV_INSERT, "ProjectNumber, Location, "
COPYPROPOSAL+INDV_INSERT, "LocationDescription, "
COPYPROPOSAL+INDV_INSERT, "SpecYear, District, CountyID, CountyName, "
COPYPROPOSAL+INDV_INSERT, "WorkType, RoadType, LettingDate, "
COPYPROPOSAL+INDV_INSERT, "LowBidderKey, AwardedBidderKey, NumberOfBids, "
COPYPROPOSAL+INDV_INSERT, "LowBidTotal, AwardedBidTotal, EngineersEstimate, "
COPYPROPOSAL+INDV_INSERT, "DateComplete, Status, PercentComplete, RejectedFlag, "
COPYPROPOSAL+INDV_INSERT, "Reason, AveragePavementDepth, AveragePavementWidth, "
COPYPROPOSAL+INDV_INSERT, "ProposalLength) "
COPYPROPOSAL+INDV_INSERT, " VALUES "
COPYPROPOSAL+INDV_INSERT, "('%TodaysDate', %ProposalKey, '%ProposalID', "
COPYPROPOSAL+INDV_INSERT, " 'Description text.', "
COPYPROPOSAL+INDV_INSERT, " '%ProjectNumber', 0x%Location, "
COPYPROPOSAL+INDV_INSERT, " 'Location description text. ', "
COPYPROPOSAL+INDV_INSERT, "%SpecYear, %District, '%CountyID', '%CountyName', "
COPYPROPOSAL+INDV_INSERT, "%WorkType, %RoadType, '%LettingDate', "
COPYPROPOSAL+INDV_INSERT, "%LowBidderKey, %AwardedBidderKey, %NumberOfBids, "
COPYPROPOSAL+INDV_INSERT, "%LowBidTotal, %AwardedBidTotal, %EngineersEstimate, "
COPYPROPOSAL+INDV_INSERT, " '%DateComplete', %Status, %PercentComplete, %RejectedFlag, "
COPYPROPOSAL+INDV_INSERT, "%Reason, %AveragePavementDepth, %AveragePavementWidth, "
COPYPROPOSAL+INDV_INSERT, "%ProposalLength) "

//COPYPROPOSAL+INDV_INSERT, "ELSE do an update rather than an insert "
//COPYPROPOSAL+INDV_INSERT,       "also remember to redo the token and value arrays!!!"

COPYPROPOSAL+INDV_SELECT, "/* COPYPROPOSAL */ "
COPYPROPOSAL+INDV_SELECT, "SELECT '%ProductionDatabase', "
COPYPROPOSAL+INDV_SELECT, "%TodaysDate, ProposalKey, ProposalID, Description, "
COPYPROPOSAL+INDV_SELECT, "ProjectNumber, Location, LocationDescription, "
COPYPROPOSAL+INDV_SELECT, "SpecYear, District, CountyID, CountyName, "
COPYPROPOSAL+INDV_SELECT, "WorkType, RoadType, LettingDate, "
COPYPROPOSAL+INDV_SELECT, "LowBidderKey, AwardedBidderKey, NumberOfBids, "
COPYPROPOSAL+INDV_SELECT, "LowBidTotal, AwardedBidTotal, EngineersEstimate, "
COPYPROPOSAL+INDV_SELECT, "DateComplete, Status, (PercentComplete / 100.0), RejectedFlag, "
COPYPROPOSAL+INDV_SELECT, "Reason, AveragePavementDepth, AveragePavementWidth, "
COPYPROPOSAL+INDV_SELECT, "ProposalLength "
COPYPROPOSAL+INDV_SELECT, "FROM HistoricalProposal "
COPYPROPOSAL+INDV_SELECT, "WHERE ProposalKey = %ProposalKey "
COPYPROPOSAL+INDV_SELECT, "AND District IS NOT NULL "
COPYPROPOSAL+INDV_SELECT, "AND WorkType IS NOT NULL "
COPYPROPOSAL+INDV_SELECT, "AND RoadType IS NOT NULL "
COPYPROPOSAL+INDV_SELECT, "AND CountyName IS NOT NULL "
COPYPROPOSAL+INDV_SELECT, "AND LowBidderKey IS NOT NULL "
COPYPROPOSAL+INDV_SELECT, "AND AwardedBidderKey IS NOT NULL "
COPYPROPOSAL+INDV_SELECT, "AND Status IS NOT NULL "
COPYPROPOSAL+INDV_SELECT, "AND Reason IS NOT NULL "




COPYPROPOSALITEM+INDV_SELECT, "/* COPYPROPOSALITEM */ "
COPYPROPOSALITEM+INDV_SELECT, "SELECT '%ProductionDatabase', "
COPYPROPOSALITEM+INDV_SELECT, "ProposalKey, ProposalItemKey, ItemKey, "
COPYPROPOSALITEM+INDV_SELECT, "Quantity, AlternateGroup, Alternate, LineNumber "
COPYPROPOSALITEM+INDV_SELECT, "FROM HistoricalProposalItem "
COPYPROPOSALITEM+INDV_SELECT, "WHERE ProposalItemKey IS NOT NULL "
COPYPROPOSALITEM+INDV_SELECT, "AND ItemKey IS NOT NULL "
COPYPROPOSALITEM+INDV_SELECT, "AND ProposalKey = %ProposalKey "

COPYPROPOSALITEM+INDV_INSERT, "INSERT INTO %ProductionDatabase..HistoricalProposalItem"
COPYPROPOSALITEM+INDV_INSERT, " (ProposalKey, ProposalItemKey, ItemKey, "
COPYPROPOSALITEM+INDV_INSERT, "Quantity, AlternateGroup, Alternate, LineNumber) "
COPYPROPOSALITEM+INDV_INSERT, " VALUES (%ProposalKey, %ProposalItemKey, %ItemKey, "
COPYPROPOSALITEM+INDV_INSERT, "%Quantity, '%AlternateGroup', '%Alternate', '%LineNumber' ) "

COPYPROPOSALITEM,       "INSERT INTO %ProductionDatabase..HistoricalProposalItem"
COPYPROPOSALITEM,       "(ProposalItemKey, ProposalKey, ItemKey, "
COPYPROPOSALITEM,       "Quantity, AlternateGroup, Alternate, LineNumber) "
COPYPROPOSALITEM,       "SELECT ProposalItemKey, ProposalKey, ItemKey, "
COPYPROPOSALITEM,       "Quantity, AlternateGroup, Alternate, LineNumber "
COPYPROPOSALITEM,       "FROM HistoricalProposalItem "
COPYPROPOSALITEM,       "WHERE ProposalItemKey IS NOT NULL "
COPYPROPOSALITEM,       "AND ProposalKey IS NOT NULL "
COPYPROPOSALITEM,       "AND ItemKey IS NOT NULL "
COPYPROPOSALITEM,       "AND ProposalKey !=0 "



COPYPROPOSALMAJORITEM+INDV_SELECT,  "/* COPYPROPOSALMAJORITEM */ "
COPYPROPOSALMAJORITEM+INDV_SELECT,  "SELECT '%ProductionDatabase', " 
COPYPROPOSALMAJORITEM+INDV_SELECT,  "ProposalKey, MajorItemKey, Quantity, "
COPYPROPOSALMAJORITEM+INDV_SELECT,  "ExtendedAmount, WeightedAverageUnitPrice "
COPYPROPOSALMAJORITEM+INDV_SELECT,  "FROM HistoricalProposalMajorItem "
COPYPROPOSALMAJORITEM+INDV_SELECT,  "WHERE ProposalKey = %ProposalKey "
COPYPROPOSALMAJORITEM+INDV_SELECT,  "AND MajorItemKey IS NOT NULL "

COPYPROPOSALMAJORITEM+INDV_INSERT,  "/* COPYPROPOSALMAJORITEM InsertUpdate */ "
COPYPROPOSALMAJORITEM+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM "
COPYPROPOSALMAJORITEM+INDV_INSERT,  " %ProductionDatabase..HistoricalProposalMajorItem "
COPYPROPOSALMAJORITEM+INDV_INSERT,  " WHERE ProposalKey = %ProposalKey "
COPYPROPOSALMAJORITEM+INDV_INSERT,  " AND MajorItemKey = %MajorItemKey ) "

COPYPROPOSALMAJORITEM+INDV_INSERT,    "INSERT INTO %ProductionDatabase..HistoricalProposalMajorItem"
COPYPROPOSALMAJORITEM+INDV_INSERT,    "(ProposalKey, MajorItemKey, Quantity, "
COPYPROPOSALMAJORITEM+INDV_INSERT,    "ExtendedAmount, WeightedAverageUnitPrice) "
COPYPROPOSALMAJORITEM+INDV_INSERT,    "VALUES (%ProposalKey, %MajorItemKey, %Quantity, "
COPYPROPOSALMAJORITEM+INDV_INSERT,    "%ExtendedAmount, %WeightedAverageUnitPrice)  "

COPYPROPOSALMAJORITEM+INDV_INSERT, "ELSE "
COPYPROPOSALMAJORITEM+INDV_INSERT,    "UPDATE %ProductionDatabase..HistoricalProposalMajorItem"
COPYPROPOSALMAJORITEM+INDV_INSERT,    " SET Quantity = %Quantity "
COPYPROPOSALMAJORITEM+INDV_INSERT,    ", ExtendedAmount = %ExtendedAmount "
COPYPROPOSALMAJORITEM+INDV_INSERT,    ", WeightedAverageUnitPrice = %WeightedAverageUnitPrice "
COPYPROPOSALMAJORITEM+INDV_INSERT,  " WHERE ProposalKey = %ProposalKey "
COPYPROPOSALMAJORITEM+INDV_INSERT,  " AND MajorItemKey = %MajorItemKey "


COPYPROPOSALMAJORITEM,  "INSERT INTO %ProductionDatabase..HistoricalProposalMajorItem"
COPYPROPOSALMAJORITEM,  "(ProposalKey, MajorItemKey, Quantity, "
COPYPROPOSALMAJORITEM,  "ExtendedAmount, WeightedAverageUnitPrice) "
COPYPROPOSALMAJORITEM,  "SELECT ProposalKey, MajorItemKey, Quantity, "
COPYPROPOSALMAJORITEM,  "ExtendedAmount, WeightedAverageUnitPrice "
COPYPROPOSALMAJORITEM,  "FROM HistoricalProposalMajorItem "
COPYPROPOSALMAJORITEM,  "WHERE ProposalKey IS NOT NULL "
COPYPROPOSALMAJORITEM,  "AND MajorItemKey IS NOT NULL "






COPYVENDORFACILITY,     "INSERT INTO %ProductionDatabase..VendorFacility "
COPYVENDORFACILITY,     "(VendorKey, FacilityNumber, DateOpened, "
COPYVENDORFACILITY,     "DateClosed, PortableFlag, CountyKey, Location)"
COPYVENDORFACILITY,     "SELECT VendorKey, FacilityNumber, DateOpened, "
COPYVENDORFACILITY,     "DateClosed, PortableFlag, CountyKey, Location "
COPYVENDORFACILITY,     "FROM VendorFacility "
COPYVENDORFACILITY,     "WHERE VendorKey IS NOT NULL "
COPYVENDORFACILITY,     "AND CountyKey IS NOT NULL "

COPYVENDOR, "INSERT INTO %ProductionDatabase..Vendor "
COPYVENDOR, "(VendorKey, VendorID, ShortName, "
COPYVENDOR, "Name, Type, Certification, DBEClassification) "
COPYVENDOR, "SELECT VendorKey, VendorID, ShortName, "
COPYVENDOR, "Name, Type, Certification, DBEClassification "
COPYVENDOR, "FROM Vendor "
COPYVENDOR, "WHERE VendorKey IS NOT NULL "
COPYVENDOR, "AND Type IS NOT NULL "
COPYVENDOR, "AND Certification IS NOT NULL "
COPYVENDOR, "AND DBEClassification IS NOT NULL "

SETKMVENDOR, " UPDATE %ProductionDatabase..KeyMaster "
SETKMVENDOR, " SET KeyValue = 1 + (select MAX(VendorKey)"
SETKMVENDOR,                     " from %ProductionDatabase..Vendor) "
SETKMVENDOR, " WHERE TableName = 'Vendor' "

UPDATEVENDOR,       "UPDATE %ProductionDatabase..Vendor "
UPDATEVENDOR,       "SET  PV.ShortName = IV.ShortName, "
UPDATEVENDOR,       "PV.Name = IV.Name, "
UPDATEVENDOR,       "PV.Type = IV.Type, "
UPDATEVENDOR,       "PV.Certification = IV.Certification, "
UPDATEVENDOR,       "PV.DBEClassification = IV.DBEClassification  "
UPDATEVENDOR,       "FROM %ProductionDatabase..Vendor PV, "
UPDATEVENDOR,            "DSShellImport..Vendor IV "
UPDATEVENDOR,       "WHERE IV.VendorKey IS NOT NULL "
UPDATEVENDOR,       "AND IV.Type IS NOT NULL "
UPDATEVENDOR,       "AND IV.Certification IS NOT NULL "
UPDATEVENDOR,       "AND IV.DBEClassification IS NOT NULL "
UPDATEVENDOR,       "AND IV.VendorID = PV.VendorID "


COPYPARAMETRICPROFILE,  " INSERT INTO %ProductionDatabase..ParametricProfile"
COPYPARAMETRICPROFILE,  " (ProfileKey,ProfileID,Description)"
COPYPARAMETRICPROFILE,  " SELECT ProfileKey,ProfileID,Description"
COPYPARAMETRICPROFILE,  " FROM ParametricProfile"
COPYPARAMETRICPROFILE,  " WHERE ProfileKey != 0 "

COPYSIGMAJORITEM,       " INSERT INTO %ProductionDatabase..SignificantMajorItem"
COPYSIGMAJORITEM,       " (ProfileKey,MajorItemKey,PercentofValue,"
COPYSIGMAJORITEM,       " PercentofValueLock)"
COPYSIGMAJORITEM,       " SELECT ProfileKey,MajorItemKey,PercentofValue,"
COPYSIGMAJORITEM,       " PercentofValueLock"
COPYSIGMAJORITEM,       " FROM SignificantMajorItem"
COPYSIGMAJORITEM,       " WHERE ProfileKey != 0"

/////

COPYMIPA, " INSERT INTO %ProductionDatabase..MajorItemPriceAdjustment"
COPYMIPA, " (MajorItemKey,BaseDate,QualitativeVariable,"
COPYMIPA, " QualitativeValue,PriceAdjustment)"
COPYMIPA, " SELECT MajorItemKey,BaseDate,QualitativeVariable,"
COPYMIPA, " QualitativeValue,PriceAdjustment"
COPYMIPA, " FROM MajorItemPriceAdjustment"
COPYMIPA, " WHERE MajorItemKey != 0"

COPYMIPA+INDV_SELECT, "/* COPYMIPA+INDV_SELECT */"
COPYMIPA+INDV_SELECT, " SELECT '%ProductionDatabase' "
COPYMIPA+INDV_SELECT, " ,MajorItemKey,BaseDate,QualitativeVariable,"
COPYMIPA+INDV_SELECT, " QualitativeValue,PriceAdjustment"
COPYMIPA+INDV_SELECT, " FROM MajorItemPriceAdjustment"
COPYMIPA+INDV_SELECT, " WHERE MajorItemKey != 0"

COPYMIPA+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM"
COPYMIPA+INDV_INSERT, " %ProductionDatabase..MajorItemPriceAdjustment"
COPYMIPA+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIPA+INDV_INSERT,  "AND QualitativeVariable = %QualitativeVariable "
COPYMIPA+INDV_INSERT, " AND BaseDate = '%BaseDate' ) "
COPYMIPA+INDV_INSERT, " INSERT INTO" 
COPYMIPA+INDV_INSERT, " %ProductionDatabase..MajorItemPriceAdjustment"
COPYMIPA+INDV_INSERT, " (MajorItemKey,BaseDate,QualitativeVariable,"
COPYMIPA+INDV_INSERT, " QualitativeValue,PriceAdjustment)"
COPYMIPA+INDV_INSERT, " VALUES (%MajorItemKey, '%BaseDate', %QualitativeVariable , "
COPYMIPA+INDV_INSERT, " '%QualitativeValue', %PriceAdjustment) "
COPYMIPA+INDV_INSERT, " ELSE UPDATE"
COPYMIPA+INDV_INSERT, " %ProductionDatabase..MajorItemPriceAdjustment"
COPYMIPA+INDV_INSERT, " SET"
COPYMIPA+INDV_INSERT,   " QualitativeValue = '%QualitativeValue' "
COPYMIPA+INDV_INSERT,  ", PriceAdjustment = %PriceAdjustment "
COPYMIPA+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIPA+INDV_INSERT,  " AND QualitativeVariable = %QualitativeVariable "
COPYMIPA+INDV_INSERT,  " AND BaseDate = '%BaseDate' "


COPYMIPR,       " INSERT INTO %ProductionDatabase..MajorItemPriceRegression"
COPYMIPR,       " (MajorItemKey,BaseDate,MedianQuantity,"
COPYMIPR,       " MedianQuantityUnitPrice,QuantityAdjustment)"
COPYMIPR,       " SELECT MajorItemKey,BaseDate,MedianQuantity,"
COPYMIPR,       " MedianQuantityUnitPrice,QuantityAdjustment"
COPYMIPR,       " FROM MajorItemPriceRegression"
COPYMIPR,       " WHERE MajorItemKey != 0"

COPYMIPR+INDV_SELECT, " SELECT '%ProductionDatabase' "
COPYMIPR+INDV_SELECT, " ,MajorItemKey,BaseDate,MedianQuantity,"
COPYMIPR+INDV_SELECT, " MedianQuantityUnitPrice,QuantityAdjustment"
COPYMIPR+INDV_SELECT, " FROM MajorItemPriceRegression"
COPYMIPR+INDV_SELECT, " WHERE MajorItemKey != 0"
COPYMIPR+INDV_SELECT, " AND BaseDate > 'Jan  2 1900' "
COPYMIPR+INDV_SELECT, " order by MajorItemKey, BaseDate "

COPYMIPR+INDV_INSERT, "/* COPYMIPR+INDV_INSERT */ "
COPYMIPR+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM"
COPYMIPR+INDV_INSERT, " %ProductionDatabase..MajorItemPriceRegression"
COPYMIPR+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIPR+INDV_INSERT, " AND BaseDate = '%BaseDate' ) "
COPYMIPR+INDV_INSERT, " INSERT INTO" 
COPYMIPR+INDV_INSERT, " %ProductionDatabase..MajorItemPriceRegression"
COPYMIPR+INDV_INSERT, " (MajorItemKey,BaseDate,MedianQuantity,"
COPYMIPR+INDV_INSERT, " MedianQuantityUnitPrice,QuantityAdjustment)"
COPYMIPR+INDV_INSERT, " VALUES (%MajorItemKey, '%BaseDate', %MedianQuantity,"
COPYMIPR+INDV_INSERT, " %MedianQuantityUnitPrice, %QuantityAdjustment ) "
COPYMIPR+INDV_INSERT, " ELSE UPDATE"
COPYMIPR+INDV_INSERT, " %ProductionDatabase..MajorItemPriceRegression"
COPYMIPR+INDV_INSERT, " SET"
COPYMIPR+INDV_INSERT,  " MedianQuantity = %MedianQuantity ,"
COPYMIPR+INDV_INSERT,  " MedianQuantityUnitPrice = %MedianQuantityUnitPrice ,"
COPYMIPR+INDV_INSERT,  " QuantityAdjustment = %QuantityAdjustment "
COPYMIPR+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIPR+INDV_INSERT,  " AND BaseDate = '%BaseDate' "

COPYMIPV,       " INSERT INTO %ProductionDatabase..MajorItemPriceVariable"
COPYMIPV,       " (MajorItemKey,QualitativeVariable,BaseDate)"
COPYMIPV,       " SELECT MajorItemKey,QualitativeVariable,BaseDate"
COPYMIPV,       " FROM MajorItemPriceVariable"
COPYMIPV,       " WHERE MajorItemKey != 0"

COPYMIPV+INDV_SELECT, " SELECT '%ProductionDatabase' "
COPYMIPV+INDV_SELECT, " ,MajorItemKey, BaseDate, QualitativeVariable"
COPYMIPV+INDV_SELECT, " FROM MajorItemPriceVariable"
COPYMIPV+INDV_SELECT, " WHERE MajorItemKey != 0"
COPYMIPV+INDV_SELECT, " AND BaseDate > 'Jan  2 1900' "

COPYMIPV+INDV_INSERT, "/* COPYMIPV+INDV_INSERT */ "
COPYMIPV+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM"
COPYMIPV+INDV_INSERT, " %ProductionDatabase..MajorItemPriceVariable"
COPYMIPV+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIPV+INDV_INSERT, " AND BaseDate = '%BaseDate' "
COPYMIPV+INDV_INSERT,  "AND QualitativeVariable = %QualitativeVariable )"
COPYMIPV+INDV_INSERT, " INSERT INTO"
COPYMIPV+INDV_INSERT, " %ProductionDatabase..MajorItemPriceVariable"
COPYMIPV+INDV_INSERT,  " (MajorItemKey, BaseDate, QualitativeVariable)"
COPYMIPV+INDV_INSERT, " VALUES "
COPYMIPV+INDV_INSERT, " ( %MajorItemKey, '%BaseDate', %QualitativeVariable ) "
COPYMIPV+INDV_INSERT, " ELSE UPDATE"
COPYMIPV+INDV_INSERT, " %ProductionDatabase..MajorItemPriceVariable"
COPYMIPV+INDV_INSERT, " SET"
COPYMIPV+INDV_INSERT,  " QualitativeVariable = %QualitativeVariable "
COPYMIPV+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIPV+INDV_INSERT, " AND BaseDate = '%BaseDate' "



//////
COPYMIQA,   " INSERT INTO %ProductionDatabase..MajorItemQuantityAdjustment"
COPYMIQA,   " (MajorItemKey,BaseDate,QualitativeVariable,"
COPYMIQA,   " VariableValue,QuantityAdjustment)"
COPYMIQA,   " SELECT MajorItemKey,BaseDate,QualitativeVariable,"
COPYMIQA,   " VariableValue,QuantityAdjustment"
COPYMIQA,   " FROM MajorItemQuantityAdjustment"
COPYMIQA,   " WHERE MajorItemKey != 0"

COPYMIQA+INDV_SELECT, "/* COPYMIQA SELECT */ " 
COPYMIQA+INDV_SELECT, "SELECT '%ProductionDatabase' "
COPYMIQA+INDV_SELECT, " ,MajorItemKey, BaseDate, QualitativeVariable,"
COPYMIQA+INDV_SELECT, " VariableValue, QuantityAdjustment "
COPYMIQA+INDV_SELECT, " FROM MajorItemQuantityAdjustment"
COPYMIQA+INDV_SELECT, " WHERE MajorItemKey != 0"

COPYMIQA+INDV_INSERT, "/* COPYMIQA INSERT */ " 
COPYMIQA+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM"
COPYMIQA+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityAdjustment"
COPYMIQA+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIQA+INDV_INSERT,  "AND QualitativeVariable = %QualitativeVariable "
COPYMIQA+INDV_INSERT, " AND BaseDate = '%BaseDate' ) "
COPYMIQA+INDV_INSERT, " INSERT INTO"
COPYMIQA+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityAdjustment"
COPYMIQA+INDV_INSERT, " (MajorItemKey, BaseDate, QualitativeVariable,"
COPYMIQA+INDV_INSERT, " VariableValue, QuantityAdjustment) "
COPYMIQA+INDV_INSERT, " VALUES (%MajorItemKey, '%BaseDate', %QualitativeVariable,"
COPYMIQA+INDV_INSERT, " %VariableValue, %QuantityAdjustment) "
COPYMIQA+INDV_INSERT, " ELSE UPDATE"
COPYMIQA+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityAdjustment"
COPYMIQA+INDV_INSERT, " SET"
COPYMIQA+INDV_INSERT,   " VariableValue = %VariableValue "
COPYMIQA+INDV_INSERT,  ", QuantityAdjustment = %QuantityAdjustment "
COPYMIQA+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIQA+INDV_INSERT,  " AND QualitativeVariable = %QualitativeVariable "
COPYMIQA+INDV_INSERT,  " AND BaseDate = '%BaseDate' "


COPYMIQR,   " INSERT INTO %ProductionDatabase..MajorItemQuantityRegression"
COPYMIQR,   " (MajorItemKey,BaseDate,BaseCoefficient,"
COPYMIQR,   " DepthAdjustment,WidthAdjustment,"
COPYMIQR,   " CrossSectionAdjustment,StructureBaseAdjustment,"
COPYMIQR,   " StructureWidthAdjustment,StructureLengthAdjustment,"
COPYMIQR,   " StructureAreaAdjustment)"
COPYMIQR,   " SELECT MajorItemKey,BaseDate,BaseCoefficient,"
COPYMIQR,   " DepthAdjustment,WidthAdjustment,"
COPYMIQR,   " CrossSectionAdjustment,StructureBaseAdjustment,"
COPYMIQR,   " StructureWidthAdjustment,StructureLengthAdjustment,"
COPYMIQR,   " StructureAreaAdjustment"
COPYMIQR,   " FROM MajorItemQuantityRegression"
COPYMIQR,   " WHERE MajorItemKey != 0"

COPYMIQR+INDV_SELECT, "/* COPYMIQR SELECT */ " 
COPYMIQR+INDV_SELECT, "SELECT '%ProductionDatabase' "
COPYMIQR+INDV_SELECT,   ", MajorItemKey, BaseDate, BaseCoefficient,"
COPYMIQR+INDV_SELECT,   " DepthAdjustment, WidthAdjustment,"
COPYMIQR+INDV_SELECT,   " CrossSectionAdjustment, StructureBaseAdjustment,"
COPYMIQR+INDV_SELECT,   " StructureWidthAdjustment, StructureLengthAdjustment,"
COPYMIQR+INDV_SELECT,   " StructureAreaAdjustment"
COPYMIQR+INDV_SELECT, " FROM MajorItemQuantityRegression"
COPYMIQR+INDV_SELECT,   " WHERE MajorItemKey != 0"
// COPYMIQR+INDV_SELECT, " WHERE BaseDate = "
// COPYMIQR+INDV_SELECT, " (select MAX(BaseDate)"
// COPYMIQR+INDV_SELECT,  " from MajorItemQuantityRegression) "

COPYMIQR+INDV_INSERT, "/* COPYMIQR INSERT */ " 
COPYMIQR+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM"
COPYMIQR+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityRegression"
COPYMIQR+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIQR+INDV_INSERT, " AND BaseDate = '%BaseDate' ) "
COPYMIQR+INDV_INSERT, " INSERT INTO"
COPYMIQR+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityRegression"
COPYMIQR+INDV_INSERT, " (MajorItemKey,BaseDate,BaseCoefficient,"
COPYMIQR+INDV_INSERT, " DepthAdjustment,WidthAdjustment,"
COPYMIQR+INDV_INSERT, " CrossSectionAdjustment,StructureBaseAdjustment,"
COPYMIQR+INDV_INSERT, " StructureWidthAdjustment,StructureLengthAdjustment,"
COPYMIQR+INDV_INSERT, " StructureAreaAdjustment)"
COPYMIQR+INDV_INSERT, " VALUES (%MajorItemKey, '%BaseDate', %BaseCoefficient,"
COPYMIQR+INDV_INSERT, " %DepthAdjustment, %WidthAdjustment,"
COPYMIQR+INDV_INSERT, " %CrossSectionAdjustment, %StructureBaseAdjustment,"
COPYMIQR+INDV_INSERT, " %StructureWidthAdjustment, %StructureLengthAdjustment,"
COPYMIQR+INDV_INSERT, " %StructureAreaAdjustment)"
COPYMIQR+INDV_INSERT, " ELSE UPDATE"
COPYMIQR+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityRegression"
COPYMIQR+INDV_INSERT, " SET"
COPYMIQR+INDV_INSERT,  " BaseCoefficient = %BaseCoefficient "
COPYMIQR+INDV_INSERT, ", DepthAdjustment = %DepthAdjustment "
COPYMIQR+INDV_INSERT, ", WidthAdjustment = %WidthAdjustment "
COPYMIQR+INDV_INSERT, ", CrossSectionAdjustment = %CrossSectionAdjustment "
COPYMIQR+INDV_INSERT, ", StructureBaseAdjustment = %StructureBaseAdjustment "
COPYMIQR+INDV_INSERT, ", StructureWidthAdjustment = %StructureWidthAdjustment "
COPYMIQR+INDV_INSERT, ", StructureLengthAdjustment = %StructureLengthAdjustment "
COPYMIQR+INDV_INSERT, ", StructureAreaAdjustment = %StructureAreaAdjustment "
COPYMIQR+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIQR+INDV_INSERT, " AND BaseDate = '%BaseDate' "


COPYMIQR,   " INSERT INTO %ProductionDatabase..MajorItemQuantityRegression"
COPYMIQR,   " (MajorItemKey,BaseDate,BaseCoefficient,"
COPYMIQR,   " DepthAdjustment,WidthAdjustment,"
COPYMIQR,   " CrossSectionAdjustment,StructureBaseAdjustment,"
COPYMIQR,   " StructureWidthAdjustment,StructureLengthAdjustment,"
COPYMIQR,   " StructureAreaAdjustment)"
COPYMIQR,   " SELECT MajorItemKey,BaseDate,BaseCoefficient,"
COPYMIQR,   " DepthAdjustment,WidthAdjustment,"
COPYMIQR,   " CrossSectionAdjustment,StructureBaseAdjustment,"
COPYMIQR,   " StructureWidthAdjustment,StructureLengthAdjustment,"
COPYMIQR,   " StructureAreaAdjustment"
COPYMIQR,   " FROM MajorItemQuantityRegression"
COPYMIQR,   " WHERE MajorItemKey != 0"



COPYMIQV+INDV_SELECT,   "/* COPYMIQV+INDV_SELECT */"
COPYMIQV+INDV_SELECT,   " SELECT '%ProductionDatabase' "
COPYMIQV+INDV_SELECT,     ", MajorItemKey, BaseDate, QualitativeVariable"
COPYMIQV+INDV_SELECT,   " FROM MajorItemQuantityVariable"
COPYMIQV+INDV_SELECT,   " WHERE MajorItemKey != 0"

COPYMIQV+INDV_INSERT, "/* COPYMIQV INSERT */ " 
COPYMIQV+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM"
COPYMIQV+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityVariable"
COPYMIQV+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIQV+INDV_INSERT,  "AND QualitativeVariable = %QualitativeVariable "
COPYMIQV+INDV_INSERT, " AND BaseDate = '%BaseDate' ) "
COPYMIQV+INDV_INSERT, " INSERT INTO"
COPYMIQV+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityVariable"
COPYMIQV+INDV_INSERT,  " (MajorItemKey, QualitativeVariable, BaseDate)"
COPYMIQV+INDV_INSERT, " VALUES "
COPYMIQV+INDV_INSERT, " ( %MajorItemKey, %QualitativeVariable, '%BaseDate' ) "
COPYMIQV+INDV_INSERT, " ELSE UPDATE"
COPYMIQV+INDV_INSERT, " %ProductionDatabase..MajorItemQuantityVariable"
COPYMIQV+INDV_INSERT, " SET"
COPYMIQV+INDV_INSERT,  " QualitativeVariable = %QualitativeVariable "
COPYMIQV+INDV_INSERT,  ", BaseDate = '%BaseDate' "
COPYMIQV+INDV_INSERT, " WHERE MajorItemKey = %MajorItemKey "
COPYMIQV+INDV_INSERT, " AND BaseDate = '%BaseDate' "


COPYMIQV,   " INSERT INTO %ProductionDatabase..MajorItemQuantityVariable"
COPYMIQV,         " (MajorItemKey, QualitativeVariable, BaseDate)"
COPYMIQV,   " SELECT MajorItemKey, QualitativeVariable, BaseDate"
COPYMIQV,   " FROM MajorItemQuantityVariable"
COPYMIQV,   " WHERE MajorItemKey != 0"
                                             

/////

COPYMAJORITEM,  " INSERT INTO %ProductionDatabase..MajorItem"
COPYMAJORITEM,  " (MajorItemKey, MajorItemID, Description, "
COPYMAJORITEM,   " CommonUnit, SpecYear, UnitType) "
COPYMAJORITEM,  " SELECT "
COPYMAJORITEM,   " MajorItemKey, MajorItemID, Description, "
COPYMAJORITEM,   " CommonUnit, SpecYear, UnitType "
COPYMAJORITEM,  " FROM MajorItem "
COPYMAJORITEM,  " WHERE "
COPYMAJORITEM,  " MajorItemKey IS NOT NULL "
COPYMAJORITEM,  " AND SpecYear IS NOT NULL "
COPYMAJORITEM,  " AND SpecYear > 0 "


COPYMAJORITEM+INDV_SELECT,  "/* COPYMAJORITEM */ "
COPYMAJORITEM+INDV_SELECT,  "SELECT '%ProductionDatabase', " 
COPYMAJORITEM+INDV_SELECT,  "MajorItemKey, MajorItemID, Description, "
COPYMAJORITEM+INDV_SELECT,  "CommonUnit, SpecYear, UnitType "
COPYMAJORITEM+INDV_SELECT,  "FROM DSShellImport..MajorItem "
COPYMAJORITEM+INDV_SELECT,  "WHERE "
COPYMAJORITEM+INDV_SELECT,  " MajorItemKey > 1 "
// COPYMAJORITEM+INDV_SELECT,  " MajorItemKey IS NOT NULL "

COPYMAJORITEM+INDV_INSERT,  "/* COPYMAJORITEM InsertUpdate */ "
COPYMAJORITEM+INDV_INSERT, "IF NOT EXISTS (SELECT MajorItemKey FROM "
COPYMAJORITEM+INDV_INSERT,  " %ProductionDatabase..MajorItem "
COPYMAJORITEM+INDV_INSERT,  " WHERE "
// COPYMAJORITEM+INDV_INSERT,  " MajorItemKey = %MajorItemKey ) "
COPYMAJORITEM+INDV_INSERT,  " MajorItemID = '%MajorItemID' "
COPYMAJORITEM+INDV_INSERT,  " AND ((SpecYear = %SpecYear "
COPYMAJORITEM+INDV_INSERT,          " and (UnitType = %UnitType OR UnitType = NULL)) "
COPYMAJORITEM+INDV_INSERT,      " OR (SpecYear = NULL "
COPYMAJORITEM+INDV_INSERT,          " and (UnitType = %UnitType OR UnitType = NULL))) ) "

COPYMAJORITEM+INDV_INSERT,    "INSERT INTO %ProductionDatabase..MajorItem "
COPYMAJORITEM+INDV_INSERT,    "(MajorItemKey, MajorItemID, Description, "
COPYMAJORITEM+INDV_INSERT,    "CommonUnit, SpecYear, UnitType)"
COPYMAJORITEM+INDV_INSERT,    " VALUES (%MajorItemKey, '%MajorItemID' , '%Description' , "
COPYMAJORITEM+INDV_INSERT,    "%CommonUnit, %SpecYear, %UnitType) "

COPYMAJORITEM+INDV_INSERT, "ELSE "
COPYMAJORITEM+INDV_INSERT,    "UPDATE %ProductionDatabase..MajorItem"
COPYMAJORITEM+INDV_INSERT,    " SET Description = '%Description' "
COPYMAJORITEM+INDV_INSERT,  " ,MajorItemID = '%MajorItemID' "
COPYMAJORITEM+INDV_INSERT,  " ,CommonUnit = %CommonUnit "
COPYMAJORITEM+INDV_INSERT,  " ,SpecYear = %SpecYear "
COPYMAJORITEM+INDV_INSERT,  " ,UnitType = %UnitType "
COPYMAJORITEM+INDV_INSERT,  " ,Deleted = NULL "
COPYMAJORITEM+INDV_INSERT,  " WHERE "
COPYMAJORITEM+INDV_INSERT,  " MajorItemKey = %MajorItemKey "


///////
COPYSIMAJORITEM, " INSERT INTO %s..StandardItemMajorItem "
COPYSIMAJORITEM,      " (MajorItemKey, StandardItemKey, "
COPYSIMAJORITEM,       " QuantityConversionFactor, PercentofCost "
COPYSIMAJORITEM,      ", SpecYear) "
COPYSIMAJORITEM, " SELECT "
COPYSIMAJORITEM,    " MajorItemKey, StandardItemKey, "
COPYSIMAJORITEM,    " QuantityConversionFactor, PercentofCost,"
COPYSIMAJORITEM,    " SpecYear "
COPYSIMAJORITEM, " FROM StandardItemMajorItem "
COPYSIMAJORITEM, " WHERE  MajorItemKey IS NOT NULL "
COPYSIMAJORITEM,  " AND StandardItemKey IS NOT NULL "
COPYSIMAJORITEM,  " AND MajorItemKey > 0 "
COPYSIMAJORITEM,  " AND StandardItemKey > 0 "
COPYSIMAJORITEM,  " AND SpecYear = %s "
COPYSIMAJORITEM,  " AND UnitType = %s "

/////


LISTBADPESPROJECTS,     " SELECT ProjectControlNumber"
LISTBADPESPROJECTS,     " FROM Project"
LISTBADPESPROJECTS,     " WHERE ProjectControlNumber NOT IN"
LISTBADPESPROJECTS,     " (SELECT ProjectControlNumber"
LISTBADPESPROJECTS,     "  FROM %ProductionDatabase..JobProject)"
LISTBADPESPROJECTS,     " ORDER BY ProjectControlNumber"


DELTEMPLISTTABLE,       "IF exists "
DELTEMPLISTTABLE,       "(SELECT name "
DELTEMPLISTTABLE,       "FROM sysobjects "
DELTEMPLISTTABLE,       "WHERE name='TempList') "
DELTEMPLISTTABLE,       "DROP TABLE TempList "

PROPMAKESTDITEMLIST,    "SELECT HPI.%ColumnName, HP.SpecYear, HP.ProposalKey "
PROPMAKESTDITEMLIST,    "INTO TempList "
PROPMAKESTDITEMLIST,    "FROM %TableName HPI, HistoricalProposal HP "
PROPMAKESTDITEMLIST,    "WHERE HPI.ProposalKey = HP.ProposalKey "
PROPMAKESTDITEMLIST,    "AND HP.SpecYear IS NOT NULL "

PROPSTDITEMLIST,        "SELECT %ColumnName, SpecYear, ProposalKey "
PROPSTDITEMLIST,        "FROM TempList "

PROPSTDITEM,            "UPDATE %TableName "
PROPSTDITEM,            "SET ItemKey = "
PROPSTDITEM,            "(SELECT SI.StandardItemKey "
PROPSTDITEM,            " FROM %ProductionDatabase..StandardItem SI "
PROPSTDITEM,            " WHERE SI.StandardItemNumber = '%KeyValue' "
PROPSTDITEM,            " AND SI.SpecYear = %SpecYear "
PROPSTDITEM,            " AND SI.UnitType != NULL) "
PROPSTDITEM,            "WHERE %ColumnName = '%KeyValue' "
PROPSTDITEM,            " AND ProposalKey = %ProposalKey "
PROPSTDITEM,            " AND ItemKey IS NULL "

MAKEPROJSTDITEMLIST,    "SELECT DISTINCT %ColumnName "
MAKEPROJSTDITEMLIST,    "INTO TempList "
MAKEPROJSTDITEMLIST,    "FROM %TableName "

PROJSTDITEMLIST,        "SELECT %ColumnName "
PROJSTDITEMLIST,        "FROM TempList "

PROJSTDITEM,            "UPDATE %TableName "
PROJSTDITEM,            "SET ItemKey = "
PROJSTDITEM,            "(SELECT SI.StandardItemKey "
PROJSTDITEM,            " FROM %ProductionDatabase..StandardItem SI"
PROJSTDITEM,            " WHERE SI.StandardItemNumber = '%StandardItemNumber' "
PROJSTDITEM,            " AND SI.SpecYear = %SpecYear "
PROJSTDITEM,            " AND SI.UnitType != NULL) "
PROJSTDITEM,            "WHERE %ColumnName = '%KeyValue' "
PROJSTDITEM,            " AND ItemKey IS NULL "

PROJITEMKEY,            "UPDATE %TableName "
PROJITEMKEY,            "SET StandardItemKey = "
PROJITEMKEY,            "(SELECT StandardItemKey "
PROJITEMKEY,            " FROM %ProductionDatabase..StandardItem "
PROJITEMKEY,            " WHERE StandardItemNumber = '%StandardItemNumber' "
PROJITEMKEY,            " AND SpecYear = %SpecYear "
PROJITEMKEY,            " AND UnitType != NULL) "
PROJITEMKEY,            "WHERE %ColumnName = '%KeyValue' "
PROJITEMKEY,            " AND StandardItemKey IS NULL "

DELBADKEYTEXT,          "DELETE "
DELBADKEYTEXT,          "FROM %TableName "
DELBADKEYTEXT,          "WHERE %ColumnName < '0' "

BIDDERITEMKEY,          " UPDATE HistoricalItemBid"
BIDDERITEMKEY,          " SET ProposalItemKey ="
BIDDERITEMKEY,          " (SELECT ProposalItemKey"
BIDDERITEMKEY,          " FROM %ProductionDatabase..HistoricalProposalItem PTN"
BIDDERITEMKEY,          " WHERE PTN.LineNumber = HistoricalItemBid.ProposalItemKeyText"
BIDDERITEMKEY,          " AND HistoricalItemBid.ProposalKey = PTN.ProposalKey)"
BIDDERITEMKEY,          " WHERE ProposalItemKey IS NULL"

//BIDDERITEMKEY,          "UPDATE %TableName "
//BIDDERITEMKEY,          "SET %TargetColumn = "
//BIDDERITEMKEY,          "(SELECT %ProdKeyName "
//BIDDERITEMKEY,          " FROM %ProductionDatabase..%ProdTableName PTN "
//BIDDERITEMKEY,          " WHERE PTN.LineNumber = '%KeyValue' "
//BIDDERITEMKEY,          " AND %TableName.ProposalKey = PTN.ProposalKey) "
//BIDDERITEMKEY,          "WHERE %ColumnName = '%KeyValue' "
//BIDDERITEMKEY,          "AND %TargetColumn IS NULL "

//BIDDERITEMKEY,          "UPDATE %TableName "
//BIDDERITEMKEY,          "SET %TargetColumn = "
//BIDDERITEMKEY,          "(SELECT %ProdKeyName "
//BIDDERITEMKEY,          " FROM %ProductionDatabase..%ProdTableName PTN, "
//BIDDERITEMKEY,          " %ProductionDatabase..StandardItem SI "
//BIDDERITEMKEY,          " WHERE SI.StandardItemKey = PTN.ItemKey "
//BIDDERITEMKEY,          " AND PTN.LineNumber = '%KeyValue' "
//BIDDERITEMKEY,          " AND %TableName.ProposalKey = PTN.ProposalKey) "
//BIDDERITEMKEY,          "WHERE %ColumnName = '%KeyValue' "
//BIDDERITEMKEY,          "AND %TargetColumn IS NULL "

PROPOSALITEMKEY,        " UPDATE HistoricalProjectItem"
PROPOSALITEMKEY,        " SET ProposalItemKey ="
PROPOSALITEMKEY,        " (SELECT HPI.ProposalItemKey "
PROPOSALITEMKEY,         " FROM %ProductionDatabase..HistoricalProposalItem HPI, "
PROPOSALITEMKEY,         " HistoricalProject HPJ, HistoricalProposal HP"
PROPOSALITEMKEY,         " WHERE HPI.LineNumber = HistoricalProjectItem.ProposalItemKeyText"
PROPOSALITEMKEY,           " AND HPJ.ProposalKey = HPI.ProposalKey "
PROPOSALITEMKEY,           " AND HPJ.ProposalKey = HP.ProposalKey "
PROPOSALITEMKEY,           " AND HPJ.ProjectKey = HistoricalProjectItem.ProjectKey)"
PROPOSALITEMKEY,        " WHERE ProposalItemKey IS NULL"

CALCPROPOSALAWAZERO,    " UPDATE HistoricalProposal"
CALCPROPOSALAWAZERO,    " SET AwardedBidTotal = 0"
CALCPROPOSALAWAZERO,    " WHERE AwardedBidTotal IS NULL"

CALCPROPOSALLOWZERO,    " UPDATE HistoricalProposal"
CALCPROPOSALLOWZERO,    " SET LowBidTotal = 0"
CALCPROPOSALLOWZERO,    " WHERE LowBidTotal IS NULL"

CALCPROPOSALESTZERO,    " UPDATE HistoricalProposal"
CALCPROPOSALESTZERO,    " SET EngineersEstimate = 0"
CALCPROPOSALESTZERO,    " WHERE EngineersEstimate IS NULL"

CALCPROJITEM,           " UPDATE ProjectItem"
CALCPROJITEM,           " SET ExtendedAmount = Quantity * UnitPrice"

CALCPROPOSALAWA,        "UPDATE HistoricalProposal "
CALCPROPOSALAWA,        "SET AwardedBidTotal = "
CALCPROPOSALAWA,        "(SELECT SUM (HPI.Quantity * HIB.UnitPrice) "
CALCPROPOSALAWA,        " FROM HistoricalProposalItem HPI, "
CALCPROPOSALAWA,        " HistoricalItemBid HIB "
CALCPROPOSALAWA,        " WHERE HistoricalProposal.AwardedBidderKey = HIB.VendorKey "
CALCPROPOSALAWA,        " AND HIB.ProposalKey = HistoricalProposal.ProposalKey "
CALCPROPOSALAWA,        " AND HPI.ProposalItemKey = HIB.ProposalItemKey "
CALCPROPOSALAWA,        " AND HPI.ProposalKey = HistoricalProposal.ProposalKey) "

CALCPROPOSALLOW,        "UPDATE HistoricalProposal "
CALCPROPOSALLOW,        "SET LowBidTotal = "
CALCPROPOSALLOW,        "(SELECT SUM (HPI.Quantity * HIB.UnitPrice) "
CALCPROPOSALLOW,        " FROM HistoricalProposalItem HPI, "
CALCPROPOSALLOW,        " HistoricalItemBid HIB "
CALCPROPOSALLOW,        " WHERE HistoricalProposal.LowBidderKey = HIB.VendorKey "
CALCPROPOSALLOW,        " AND HIB.ProposalKey = HistoricalProposal.ProposalKey "
CALCPROPOSALLOW,        " AND HPI.ProposalItemKey = HIB.ProposalItemKey "
CALCPROPOSALLOW,        " AND HPI.ProposalKey = HistoricalProposal.ProposalKey) "

CALCPROPOSALEST,        "UPDATE HistoricalProposal "
CALCPROPOSALEST,        "SET EngineersEstimate = "
CALCPROPOSALEST,        "(SELECT SUM (HPI.Quantity * HIB.UnitPrice) "
CALCPROPOSALEST,        " FROM HistoricalProposalItem HPI, "
CALCPROPOSALEST,        " HistoricalItemBid HIB "
CALCPROPOSALEST,        " WHERE 1 = HIB.VendorKey "
CALCPROPOSALEST,        " AND HIB.ProposalKey = HistoricalProposal.ProposalKey "
CALCPROPOSALEST,        " AND HPI.ProposalItemKey = HIB.ProposalItemKey "
CALCPROPOSALEST,        " AND HPI.ProposalKey = HistoricalProposal.ProposalKey) "

CALCPROJECTAWAZERO,     "UPDATE HistoricalProject "
CALCPROJECTAWAZERO,     "SET AwardedAmount = 0 "
CALCPROJECTAWAZERO,     "WHERE AwardedAmount IS NULL "

CALCPROJECTLOWZERO,     "UPDATE HistoricalProject "
CALCPROJECTLOWZERO,     "SET LowBidAmount = 0 "
CALCPROJECTLOWZERO,     "WHERE LowBidAmount IS NULL "

CALCPROJECTESTZERO,     "UPDATE HistoricalProject "
CALCPROJECTESTZERO,     "SET EstimatedAmount = 0"
CALCPROJECTESTZERO,     "WHERE EstimatedAmount IS NULL "

CALCPROJECTAWA,         "UPDATE HistoricalProject "
CALCPROJECTAWA,         "SET AwardedAmount = "
CALCPROJECTAWA,         "(SELECT SUM (HPI.Quantity * HIB.UnitPrice) "
CALCPROJECTAWA,         " FROM HistoricalProjectItem HPI, "
CALCPROJECTAWA,         " HistoricalProposal HP, "
CALCPROJECTAWA,         " HistoricalItemBid HIB "
CALCPROJECTAWA,         " WHERE HP.AwardedBidderKey = HIB.VendorKey "
CALCPROJECTAWA,         " AND HP.ProposalKey = HistoricalProject.ProposalKey "
CALCPROJECTAWA,         " AND HIB.ProposalKey = HP.ProposalKey "
CALCPROJECTAWA,         " AND HPI.ProposalItemKey = HIB.ProposalItemKey "
CALCPROJECTAWA,         " AND HPI.ProjectKey = HistoricalProject.ProjectKey) "

CALCPROJECTLOW,         "UPDATE HistoricalProject "
CALCPROJECTLOW,         "SET LowBidAmount = "
CALCPROJECTLOW,         "(SELECT SUM (HPI.Quantity * HIB.UnitPrice) "
CALCPROJECTLOW,         " FROM HistoricalProjectItem HPI, "
CALCPROJECTLOW,         " HistoricalProposal HP, "
CALCPROJECTLOW,         " HistoricalItemBid HIB "
CALCPROJECTLOW,         " WHERE HP.LowBidderKey = HIB.VendorKey "
CALCPROJECTLOW,         " AND HP.ProposalKey = HistoricalProject.ProposalKey "
CALCPROJECTLOW,         " AND HIB.ProposalKey = HP.ProposalKey "
CALCPROJECTLOW,         " AND HPI.ProposalItemKey = HIB.ProposalItemKey "
CALCPROJECTLOW,         " AND HPI.ProjectKey = HistoricalProject.ProjectKey) "

CALCPROJECTEST,         "UPDATE HistoricalProject "
CALCPROJECTEST,         "SET EstimatedAmount = "
CALCPROJECTEST,         "(SELECT SUM (HPI.Quantity * HIB.UnitPrice) "
CALCPROJECTEST,         " FROM HistoricalProjectItem HPI, "
CALCPROJECTEST,         " HistoricalProposal HP, "
CALCPROJECTEST,         " HistoricalItemBid HIB "
CALCPROJECTEST,         " WHERE 1 = HIB.VendorKey "
CALCPROJECTEST,         " AND HIB.ProposalKey = HistoricalProject.ProposalKey "
CALCPROJECTEST,         " AND HPI.ProposalItemKey = HIB.ProposalItemKey "
CALCPROJECTEST,         " AND HPI.ProjectKey = HistoricalProject.ProjectKey) "

CALCBIDDERZERO,         "UPDATE HistoricalBidder "
CALCBIDDERZERO,         "SET BidTotal = 0 "
CALCBIDDERZERO,         "WHERE BidTotal IS NULL "

CALCBIDDER,             "UPDATE HistoricalBidder "
CALCBIDDER,             "SET BidTotal = "
CALCBIDDER,             "(SELECT SUM (HPI.Quantity * HIB.UnitPrice) "
CALCBIDDER,             " FROM HistoricalProposalItem HPI, "
CALCBIDDER,             " HistoricalItemBid HIB "
CALCBIDDER,             " WHERE HIB.VendorKey = HistoricalBidder.VendorKey "
CALCBIDDER,             " AND HIB.ProposalKey = HistoricalBidder.ProposalKey "
CALCBIDDER,             " AND HPI.ProposalItemKey = HIB.ProposalItemKey "
CALCBIDDER,             " AND HPI.ProposalKey = HistoricalBidder.ProposalKey) "

CALCLOWBIDDER,          "UPDATE HistoricalProposal "
CALCLOWBIDDER,          "SET LowBidderKey = "
CALCLOWBIDDER,          "(SELECT VendorKey "
CALCLOWBIDDER,          " FROM HistoricalBidder HB "
CALCLOWBIDDER,          " WHERE HB.ProposalKey = HistoricalProposal.ProposalKey "
CALCLOWBIDDER,          " AND HB.VendorKey != 1 "
CALCLOWBIDDER,          " AND BidTotal = "
CALCLOWBIDDER,          " (SELECT MIN (BidTotal) "
CALCLOWBIDDER,           " FROM HistoricalBidder HB "
CALCLOWBIDDER,           " WHERE HB.ProposalKey = HistoricalProposal.ProposalKey "
CALCLOWBIDDER,           " AND HB.VendorKey != 1 "
CALCLOWBIDDER,           " AND BidTotal IS NOT NULL "
CALCLOWBIDDER,           " AND BidTotal != 0)) "

MAKEHPMI,   "INSERT INTO HistoricalProposalMajorItem "
MAKEHPMI,   "(ProposalKey, MajorItemKey, Quantity, "
MAKEHPMI,   "ExtendedAmount, WeightedAverageUnitPrice, ProposalKeyText) "
MAKEHPMI,   "SELECT DISTINCT HPI.ProposalKey, SIMI.MajorItemKey, "
MAKEHPMI,   "0,0,0, HPI.ProposalKeyText "
MAKEHPMI,   "FROM HistoricalProposalItem HPI, "
MAKEHPMI,      " %ProductionDatabase..StandardItem SI, "
MAKEHPMI,      " %ProductionDatabase..StandardItemMajorItem SIMI "
MAKEHPMI,   "WHERE HPI.ItemKey=SI.StandardItemKey "
MAKEHPMI,   "AND SI.StandardItemKey=SIMI.StandardItemKey "

CALCHPMIQUANTITY,       "SELECT  SIMI.MajorItemKey,"
CALCHPMIQUANTITY,       " SUM(Quantity * QuantityConversionFactor) "
CALCHPMIQUANTITY,       " , 'ExtPlaceHolder'"
CALCHPMIQUANTITY,       " FROM HistoricalProposalItem HPI,"
CALCHPMIQUANTITY,       " %ProductionDatabase..StandardItemMajorItem SIMI, "
CALCHPMIQUANTITY,       " HistoricalItemBid HIB, HistoricalProposal HP "
CALCHPMIQUANTITY,       " WHERE HPI.ItemKey=SIMI.StandardItemKey "
CALCHPMIQUANTITY,       " AND HIB.ProposalItemKey=HPI.ProposalItemKey "
CALCHPMIQUANTITY,       " AND HIB.ProposalKey=HPI.ProposalKey "
CALCHPMIQUANTITY,       " AND HIB.LowCostAlternate = 1 "
CALCHPMIQUANTITY,       " AND HIB.ProposalKey=HP.ProposalKey "
CALCHPMIQUANTITY,       " AND HIB.VendorKey=HP.AwardedBidderKey "
CALCHPMIQUANTITY,       " AND HP.ProposalKey = %HPProposalKey "
CALCHPMIQUANTITY,       " GROUP BY  SIMI.MajorItemKey "

// CALCHPMIEXTENSION,      "UPDATE HistoricalProposalMajorItem "
// CALCHPMIEXTENSION,      "SET ExtendedAmount = Quantity * ("
CALCHPMIEXTENSION,      "SELECT  SIMI.MajorItemKey, 'QtyPlaceHolder',"
CALCHPMIEXTENSION,      " SUM (HPI.Quantity * HIB.UnitPrice)"
CALCHPMIEXTENSION,      " FROM HistoricalProposalItem HPI,"
CALCHPMIEXTENSION,      " %ProductionDatabase..StandardItemMajorItem SIMI, "
CALCHPMIEXTENSION,      " HistoricalItemBid HIB, HistoricalProposal HP "
CALCHPMIEXTENSION,      " WHERE HPI.ItemKey=SIMI.StandardItemKey "
// CALCHPMIEXTENSION,      " AND SIMI.MajorItemKey=HistoricalProposalMajorItem.MajorItemKey "
// CALCHPMIEXTENSION,      " AND HPI.ProposalKey=HistoricalProposalMajorItem.ProposalKey "
CALCHPMIEXTENSION,      " AND HIB.ProposalItemKey=HPI.ProposalItemKey "
CALCHPMIEXTENSION,      " AND HIB.ProposalKey=HPI.ProposalKey "
CALCHPMIEXTENSION,      " AND HIB.LowCostAlternate=1 "
CALCHPMIEXTENSION,      " AND HIB.ProposalKey=HP.ProposalKey "
CALCHPMIEXTENSION,      " AND HIB.VendorKey=HP.AwardedBidderKey"
CALCHPMIEXTENSION,      " AND HP.ProposalKey = %HPProposalKey "
CALCHPMIEXTENSION,      " GROUP BY  SIMI.MajorItemKey "
// CALCHPMIEXTENSION,      " ) "

CALCHPMIUNITPRICE,      "UPDATE HistoricalProposalMajorItem "
CALCHPMIUNITPRICE,      "SET WeightedAverageUnitPrice= "
CALCHPMIUNITPRICE,      " ExtendedAmount / Quantity "
CALCHPMIUNITPRICE,      " WHERE Quantity > 0"
CALCHPMIUNITPRICE,      " AND ExtendedAmount > 0 "

COPYHPMI,               "INSERT INTO "
COPYHPMI,               "%ProductionDatabase..HistoricalProposalMajorItem "
COPYHPMI,               "(ProposalKey,MajorItemKey,Quantity,ExtendedAmount, "
COPYHPMI,               "WeightedAverageUnitPrice) "
COPYHPMI,               "SELECT ProposalKey,MajorItemKey,Quantity,"
COPYHPMI,               "ExtendedAmount,WeightedAverageUnitPrice "
COPYHPMI,               "FROM HistoricalProposalMajorItem "
COPYHPMI,               "WHERE ProposalKey IS NOT NULL "
COPYHPMI,               " AND MajorItemKey IS NOT NULL "

COPYMAP,                " INSERT INTO %ProductionDatabase..Map"
COPYMAP,                " (MapKey,MapID,Description)"
COPYMAP,                " SELECT MapKey, MapID, Description"
COPYMAP,                " FROM Map"

COPYMAPVERTEX,          " INSERT INTO %ProductionDatabase..MapVertex"
COPYMAPVERTEX,          " (MapKey,VertexOrder,Vertex)"
COPYMAPVERTEX,          " SELECT MapKey,VertexOrder,Vertex"
COPYMAPVERTEX,          " FROM MapVertex"

COPYCODETABLE,          "INSERT INTO %ProductionDatabase..CodeTable "
COPYCODETABLE,          "(CodeTableKey,CodeTableID,Description,"
COPYCODETABLE,          "MaximumCodeLength) "
COPYCODETABLE,          "SELECT CodeTableKey,CodeTableID,Description, "
COPYCODETABLE,          "MaximumCodeLength "
COPYCODETABLE,          "FROM CodeTable "
COPYCODETABLE,          "WHERE CodeTableKey IS NOT NULL "
COPYCODETABLE,          "AND Description IS NOT NULL "
COPYCODETABLE,          "AND MaximumCodeLength IS NOT NULL "

COPYCODEVALUE,          "INSERT INTO %ProductionDatabase..CodeValue "
COPYCODEVALUE,          "(CodeTableKey,CodeValueKey,CodeValueID,Translation) "
COPYCODEVALUE,          "SELECT CodeTableKey,CodeValueKey,CodeValueID,"
COPYCODEVALUE,          "Translation "
COPYCODEVALUE,          "FROM CodeValue "
COPYCODEVALUE,          "WHERE CodeTableKey IS NOT NULL "
COPYCODEVALUE,          "AND CodeValueKey IS NOT NULL "
COPYCODEVALUE,          "AND Translation IS NOT NULL "

COPYCOUNTY,             "INSERT INTO %ProductionDatabase..County "
COPYCOUNTY,             "(CountyKey, CountyID, Name) "
COPYCOUNTY,             "SELECT CountyKey, CountyID, Name "
COPYCOUNTY,             "FROM County "
COPYCOUNTY,             "WHERE CountyKey IS NOT NULL "

COPYCOUNTYMAP,          "INSERT INTO %ProductionDatabase..CountyMap "
COPYCOUNTYMAP,          "(CountyKey, MapKey) "
COPYCOUNTYMAP,          "SELECT CountyKey, MapKey "
COPYCOUNTYMAP,          "FROM CountyMap "
COPYCOUNTYMAP,          "WHERE CountyKey IS NOT NULL "
COPYCOUNTYMAP,          "AND MapKey IS NOT NULL "

COPYFUND,               "INSERT INTO %ProductionDatabase..Fund "
COPYFUND,               "(FundKey, FundID, Name, Description) "
COPYFUND,               "SELECT FundKey, FundID, Name, Description "
COPYFUND,               "FROM Fund "
COPYFUND,               "WHERE FundKey IS NOT NULL "
COPYFUND,               "AND Description IS NOT NULL "

STANDARDITEMKEY,        "UPDATE %TableName "
STANDARDITEMKEY,        "SET %TargetColumn = "
STANDARDITEMKEY,        "(SELECT %ProdKeyName "
STANDARDITEMKEY,        " FROM %ProductionDatabase..%ProdTableName "
STANDARDITEMKEY,        " WHERE %ProdIDName = '%KeyValue'"
STANDARDITEMKEY,        " AND %TableName.SpecYear = SpecYear) "
STANDARDITEMKEY,        "WHERE %ColumnName = '%KeyValue' "
STANDARDITEMKEY,        "AND %TargetColumn IS NULL "


MISTANDARDITEMKEY,  " /* MI STANDARDITEMKEY */ "
MISTANDARDITEMKEY,  "UPDATE %TableName "
MISTANDARDITEMKEY,  "SET %TargetColumn = "
MISTANDARDITEMKEY,  "(SELECT %ProdKeyName "
MISTANDARDITEMKEY,  " FROM %ProductionDatabase..%ProdTableName "
MISTANDARDITEMKEY,  " WHERE %ProdIDName = '%KeyValue' "
// MISTANDARDITEMKEY,  " AND %TableName.SpecYear = SpecYear "
MISTANDARDITEMKEY,  ") WHERE %ColumnName = '%KeyValue' "
MISTANDARDITEMKEY,  "AND %TargetColumn IS NULL "


COPYVENDORADDRESS,      "INSERT INTO %ProductionDatabase..VendorAddress "
COPYVENDORADDRESS,      "(VendorKey,AddressSequenceNumber,Address,City, "
COPYVENDORADDRESS,      "State,ZipCode,PhoneNumber,Location,VendorAddressKey) "
COPYVENDORADDRESS,      "SELECT VendorKey,AddressSequenceNumber,Address,City, "
COPYVENDORADDRESS,      "State,ZipCode,PhoneNumber,Location,VendorAddressKey "
COPYVENDORADDRESS,      "FROM VendorAddress "

COPYVENDORCLASS,        "INSERT INTO %ProductionDatabase..VendorClassification "
COPYVENDORCLASS,        "(VendorKey,VendorClassification) "
COPYVENDORCLASS,        "SELECT VendorKey,VendorClassification "
COPYVENDORCLASS,        "FROM VendorClassification "

COPYZONE,               "INSERT INTO %ProductionDatabase..Zone "
COPYZONE,               "(ZoneTypeKey,ZoneKey,ZoneID,Description) "
COPYZONE,               "SELECT ZoneTypeKey,ZoneKey,ZoneID,Description "
COPYZONE,               "FROM Zone "

COPYZONEMAP,            "INSERT INTO %ProductionDatabase..ZoneMap "
COPYZONEMAP,            "(ZoneTypeKey,ZoneKey,MapKey) "
COPYZONEMAP,            "SELECT ZoneTypeKey,ZoneKey,MapKey "
COPYZONEMAP,            "FROM ZoneMap "

COPYZONETYPE,           "INSERT INTO %ProductionDatabase..ZoneMap "
COPYZONETYPE,           "(ZoneTypeKey,ZoneTypeID,Description) "
COPYZONETYPE,           "SELECT ZoneTypeKey,ZoneTypeID,Description "
COPYZONETYPE,           "FROM ZoneMap "


DELETEOLDPESPROJ,       " DELETE FROM %ProductionDatabase..Project"
DELETEOLDPESPROJ,       " WHERE ProjectControlNumber IN"
DELETEOLDPESPROJ,       " (SELECT ProjectControlNumber FROM Project)"
DELETEOLDPESPROJ,       " DELETE FROM %ProductionDatabase..ProjectCategory"
DELETEOLDPESPROJ,       " WHERE ProjectControlNumber IN"
DELETEOLDPESPROJ,       " (SELECT ProjectControlNumber FROM Project)"
DELETEOLDPESPROJ,       " DELETE FROM %ProductionDatabase..ProjectItem"
DELETEOLDPESPROJ,       " WHERE ProjectControlNumber IN"
DELETEOLDPESPROJ,       " (SELECT ProjectControlNumber FROM Project)"
DELETEOLDPESPROJ,       " DELETE FROM %ProductionDatabase..JobItemProjectItem"
DELETEOLDPESPROJ,       " WHERE ProjectControlNumber IN"
DELETEOLDPESPROJ,       " (SELECT ProjectControlNumber FROM Project)"



GETPESJOBKEYS,          " SELECT DISTINCT JobKey"
GETPESJOBKEYS,          " FROM %ProductionDatabase..JobProject"
GETPESJOBKEYS,          " WHERE ProjectControlNumber IN"
GETPESJOBKEYS,          " (SELECT ProjectControlNumber"
GETPESJOBKEYS,          "  FROM Project)"

GETPESPROJECTKEYS,      " SELECT ProjectControlNumber"
GETPESPROJECTKEYS,      " FROM Project"
GETPESPROJECTKEYS,      " WHERE ProjectControlNumber IN"
GETPESPROJECTKEYS,      " (SELECT ProjectControlNumber"
GETPESPROJECTKEYS,      "  FROM %ProductionDatabase..JobProject)"

GETPESCATEGORYKEYS,     " SELECT ProjectControlNumber, Category"
GETPESCATEGORYKEYS,     " FROM ProjectCategory"
GETPESCATEGORYKEYS,     " WHERE ProjectControlNumber IN"
GETPESCATEGORYKEYS,     " (SELECT ProjectControlNumber"
GETPESCATEGORYKEYS,     "  FROM %ProductionDatabase..JobProject)"

:query exphdr.bin
/* BAMS/CES Jobs */
EXP_JOB,                "Job,JobID,Description,SpecYear,Location,"
EXP_JOB,                "PrimaryCountyKey,District,DavisBaconWages,"
EXP_JOB,                "BaseDate,LettingMonth,WorkType,"
EXP_JOB,                "ConstructionEngineeringPct,"
EXP_JOB,                "ContingencyPercent,EstimatedCost,"
EXP_JOB,                "EstimateTotal,Duration,WorkingDayCalendarKey,"
EXP_JOB,                "Estimator,DateCreated,LastUpdate,"
EXP_JOB,                "CheckedBy,ApprovedBy"

EXP_JOBUSER,            "JobUser,JobKey,UserID,AccessPrivilege"

EXP_JOBALTGROUP,        "JobAlternateGroup,JobKey,JobAlternateGroupID,"
EXP_JOBALTGROUP,        "Description,ChosenAlternateKey,Estimate"

EXP_JOBALT,             "JobAlternate,JobKey,JobAlternateGroupKey,"
EXP_JOBALT,             "JobAlternateID,Description,Estimate"

EXP_JOBCOMMENT,         "JobComment,JobKey,CommentDate,CommentTime,Estimator,"
EXP_JOBCOMMENT,         "Comment,ArchiveFileName"

EXP_JOBBREAK,           "JobBreakdown,JobKey,JobBreakdownID,Description,"
EXP_JOBBREAK,           "PreliminaryEstimateCost,DetailedEstimateCost,"
EXP_JOBBREAK,           "DetailedEstimate,BreakdownEstimationMethod,"
EXP_JOBBREAK,           "Length,PavementWidth,PavementDepth,RoadType,"
EXP_JOBBREAK,           "StructureType,StructureID,StructureLength,"
EXP_JOBBREAK,           "StructureWidth,WorkType"

EXP_JOBBREAKFUND,       "JobBreakdownFund,JobKey,JobBreakdownKey,FundKey,"
EXP_JOBBREAKFUND,       "PercentFunded,AmountFunded"

EXP_JOBITEM,            "JobItem,JobKey,JobItemKey,JobBreakdownKey,"
EXP_JOBITEM,            "StandardItemKey,"
EXP_JOBITEM,            "JobAlternateGroupKey,JobAlternateKey,"
EXP_JOBITEM,            "Quantity,UnitPrice,ExtendedAmount,"
EXP_JOBITEM,            "ItemEstimationMethodKey,EstimationComment,"
EXP_JOBITEM,            "SupplementalDescription,Duration,"
EXP_JOBITEM,            "DaysElapsedBeforeStart"

EXP_JOBITEMDEP,         "JobItemDependency,JobKey,PredecessorJobItemKey,"
EXP_JOBITEMDEP,         "SuccessorJobItemKey,Link,Lag,Slack"

EXP_WORKINGDAYCAL,      "WorkingDayCalendar,WorkingDayCalendarID,Description"

EXP_WORKINGDAYPRE,      "WorkingDayPrediction,WorkingDayCalendarKey,"
EXP_WORKINGDAYPRE,      "Year,Month,WorkingDays"

EXP_JOBBREAKPROF,       "JobBreakdownProfile,JobKey,JobBreakdownKey,"
EXP_JOBBREAKPROF,       "ProfileKey"

EXP_JOBBREAKMAJORITEM,  "JobBreakdownMajorItem,JobKey,JobBreakdownKey,"
EXP_JOBBREAKMAJORITEM,  "MajorItemKey,Quantity,QuantityLock,UnitPrice,"
EXP_JOBBREAKMAJORITEM,  "UnitPriceLock,ExtendedAmount"

EXP_JOBCBE,             "JobCostBasedEstimate,JobKey,JobItemKey,"
EXP_JOBCBE,             "JobItemCostBasedEstimateKey,CostBasedEstimateID,"
EXP_JOBCBE,             "Description,Active"

EXP_JOBCOSTSHEET,       "JobCostSheet,JobKey,TaskID,TaskDescription,"
EXP_JOBCOSTSHEET,       "CostSheetID,Description,ProductionRate,"
EXP_JOBCOSTSHEET,       "ProductionGranularity,HoursPerDay,"
EXP_JOBCOSTSHEET,       "OvertimeHoursPerDay,LaborDailyCost,"
EXP_JOBCOSTSHEET,       "EquipmentDailyCost,MaterialsUnitCost,"
EXP_JOBCOSTSHEET,       "MarkUpPct,LaborOverheadPct,MaterialsOverheadPct,"
EXP_JOBCOSTSHEET,       "EquipmentOverheadPct,QuantityPerItemUnit,Unit,"
EXP_JOBCOSTSHEET,       "UnitPrice"

EXP_JOBCREWUSED,        "JobCrewUsed,JobKey,JobCostSheetKey,CrewID,"
EXP_JOBCREWUSED,        "Description"

EXP_JOBCREWEQUIPMENTUSED,"JobCrewEquipmentUsed,JobKey,JobCostSheetKey,"
EXP_JOBCREWEQUIPMENTUSED,"JobCrewKey,EquipmentKey,Quantity,Rate,OvertimeRate"

EXP_JOBCREWLABORUSED,   "JobCrewLaborUsed,JobKey,JobCostSheetKey,"
EXP_JOBCREWLABORUSED,   "JobCrewKey,LaborerKey,Quantity,Rate,OvertimeRate"

EXP_JOBMATERIALUSED,    "JobMaterialUsed,JobKey,JobCostSheetKey,"
EXP_JOBMATERIALUSED,    "MaterialKey,Quantity,Unit,UnitPrice"


/* Area Types/Areas and related ilk */
EXP_AREATYPE,           "AreaType,AreaTypeID,Description"
EXP_AREA,               "Area,AreaTypeKey,AreaID,Description"
EXP_AREACOUNTY,         "AreaCounty,AreaTypeKey,AreaKey,CountyKey,BaseDate"
EXP_COUNTY,             "County,CountyID,Name"
EXP_COUNTYMAP,          "CountyMap,CountyKey,MapKey"
EXP_MAP,                "Map,MapID,Description"
EXP_MAPVERTEX,          "MapVertex,MapKey,VertexOrder,Vertex"
EXP_ZONETYPE,           "ZoneType,ZoneTypeID,Description"
EXP_ZONE,               "Zone,ZoneTypeKey,ZoneID,Description"
EXP_ZONEMAP,            "ZoneMap,ZoneTypeKey,ZoneKey,MapKey,BaseDate"

/* code table */
EXP_CODETABLE,          "CodeTable,CodeTableID,Description,MaximumCodeLength"
EXP_CODEVALUE,          "CodeValue,CodeTableKey,CodeValueID,Translation"

/* fund */
EXP_FUND,               "Fund,FundID,Name,Description"

/* default unit prices */
EXP_DEFAULT,            "StdItemDefaultPrices,StandardItemKey,BaseDate,"
EXP_DEFAULT,            "Description,UnitPrice"

/* user catalog */
EXP_USER,               "User,UserID,Name,Password,PhoneNumber,Type"
EXP_USERCATALOG,        "UserCatalog,UserKey,CatalogKey,Permission"
EXP_USERAPPLICATION,    "UserApplication,UserKey,ApplicationKey"
EXP_DEFAULTJOBUSER,     "DefaultJobUser,UserKey,UserGrantedPrivilege,AccessPrivilege"
EXP_DEFAULTPROGRAMUSER, "DefaultProgramUser,UserKey,UserGrantedPrivilege,AccessPrivilege"

/* cost based estimates */
EXP_CBE,                "StandardItemCostBasedEstimate,StandardItemKey,"
EXP_CBE,                "CostBasedEstimateID,Description,Active"

EXP_TASK,               "Task,CostBasedEstimateKey,CostSheetKey,"
EXP_TASK,               "TaskID,Description,ProductionAdjustment,"
EXP_TASK,               "MaterialQuantityAdjustment,Unit,"
EXP_TASK,               "QuantityPerItemUnit"

EXP_CBECOSTSHEET,       "CostSheet,CostSheetID,Description,"
EXP_CBECOSTSHEET,       "ProductionRate,DefaultHoursPerDay,"
EXP_CBECOSTSHEET,       "ProductionGranularity,MarkUpPct,LaborOverheadPct,"
EXP_CBECOSTSHEET,       "EquipmentOverheadPct,MaterialsOverheadPct"

EXP_CBECREWUSED,        "CrewUsed,CostSheetKey,CostSheetCrewID,Description"

EXP_CBECREWEQUIPMENTUSED,"CrewEquipmentUsed,CostSheetKey,CostSheetCrewKey,"
EXP_CBECREWEQUIPMENTUSED,"EquipmentKey,Quantity"

EXP_CBECREWLABORUSED,   "CrewLaborUsed,CostSheetKey,CostSheetCrewKey,"
EXP_CBECREWLABORUSED,   "LaborerKey,Quantity"

EXP_CBEMATERIALUSED,    "MaterialUsed,CostSheetKey,MaterialKey,Quantity"

EXP_COSTSHEET,          "CostSheet,CostSheetID,Description,"
EXP_COSTSHEET,          "ProductionRate,DefaultHoursPerDay,"
EXP_COSTSHEET,          "ProductionGranularity,MarkUpPct,LaborOverheadPct,"
EXP_COSTSHEET,          "EquipmentOverheadPct,MaterialsOverheadPct"

EXP_CREWUSED,           "CrewUsed,CostSheetKey,CostSheetCrewID,Description"

EXP_CREWEQUIPMENTUSED,  "CrewEquipmentUsed,CostSheetKey,CostSheetCrewKey,"
EXP_CREWEQUIPMENTUSED,  "EquipmentKey,Quantity"

EXP_CREWLABORUSED,      "CrewLaborUsed,CostSheetKey,CostSheetCrewKey,"
EXP_CREWLABORUSED,      "LaborerKey,Quantity"

EXP_MATERIALUSED,       "MaterialUsed,CostSheetKey,MaterialKey,Quantity"


/* crew catalog */
EXP_CREW,               "CrewUsed,CrewID,Description"

EXP_CREWEQUIPMENT,      "CrewEquipment,CrewKey,"
EXP_CREWEQUIPMENT,      "EquipmentKey,Quantity"

EXP_CREWLABOR,          "CrewLabor,CrewKey,"
EXP_CREWLABOR,          "LaborerKey,Quantity"

/* labor, equipment, materials */
EXP_EQUIPMENT,          "Equipment,EquipmentID,Descrition,ZoneTypeKey"

EXP_EQUIPMENTRATE,      "EquipmentRate,EquipmentKey,ZoneTypeKey,ZoneKey,Rate,OvertimeRate"

EXP_LABOR,              "Labor,LaborerID,Description,ZoneTypeKey"

EXP_LABORERWAGE,        "LaborerWageAndBenefits,LaborerKey,ZoneKey,"
EXP_LABORERWAGE,        "DavisBaconRate,DavisBaconOvertimeRate,"
EXP_LABORERWAGE,        "NonDavisBaconRate,NonDavisBaconOvertimeRate,"

EXP_MATERIAL,           "Material,MaterialID,Description,ZoneTypeKey,Unit"

EXP_MATERIALPRICE,      "MaterialPrice,MaterialKey,ZoneKey,UnitPrice"

/* major dudes */
EXP_MAJORITEM,          "MajorItem,MajorItemID,SpecYear,Description,CommonUnit,UnitType"

EXP_MAJORITEMSTDITEM,   "StandardItemMajorItem,StandardItemKey,MajorItemKey,"
EXP_MAJORITEMSTDITEM,   "QuantityConversionFactor,PercentofCost"

EXP_MAJORITEMPRICEREG,  "MajorItemPriceRegression,MajorItemKey,"
EXP_MAJORITEMPRICEREG,  "MedianQuantity,MedianQuantityUnitPrice,"
EXP_MAJORITEMPRICEREG,  "QuantityAdjustment,BaseDate"

EXP_MAJORITEMPRICEVAR,  "MajorItemPriceVariable,MajorItemKey,"
EXP_MAJORITEMPRICEVAR,  "QualitativeVariable,BaseDate"

EXP_MAJORITEMPRICEADJ,  "MajorItemPriceAdjustment,MajorItemKey,"
EXP_MAJORITEMPRICEADJ,  "QualitativeVariable,QualitativeValue,"
EXP_MAJORITEMPRICEADJ,  "PriceAdjustment, BaseDate"

EXP_MAJORITEMQTYREG,    "MajorItemQuantityRegression,MajorItemKey,"
EXP_MAJORITEMQTYREG,    "BaseCoefficient,DepthAdjustment,"
EXP_MAJORITEMQTYREG,    "WidthAdjustment,CrossSectionAdjustment,"
EXP_MAJORITEMQTYREG,    "StructureBaseAdjustment,"
EXP_MAJORITEMQTYREG,    "StructureWidthAdjustment,"
EXP_MAJORITEMQTYREG,    "StructureLengthAdjustment,"
EXP_MAJORITEMQTYREG,    "StructureAreaAdjustment,BaseDate"

EXP_MAJORITEMQTYVAR,    "MajorItemQuantityVariable,MajorItemKey,"
EXP_MAJORITEMQTYVAR,    "QualitativeVariable,BaseDate"

EXP_MAJORITEMQTYADJ,    "MajorItemQuantityAdjustment,MajorItemKey,"
EXP_MAJORITEMQTYADJ,    "QualitativeVariable,VariableValue,"
EXP_MAJORITEMQTYADJ,    "QuantityAdjustment,BaseDate"

EXP_PARAMETRICPROFILE,  "ParametricProfile,ProfileID,Description"

EXP_SIGMAJORITEM,       "SignificantMajorItem,ProfileKey,MajorItemKey,"
EXP_SIGMAJORITEM,       "PercentofValue,PercentofValueLock"

EXP_PEMETHAVG,          "PEMETHAverage,StandardItemKey,ImportDate,"
EXP_PEMETHAVG,          "AreaTypeKey,FifthPercentile,"
EXP_PEMETHAVG,          "TwentyFifthPercentile,FiftiethPercentile,"
EXP_PEMETHAVG,          "SeventyFifthPercentile,NinetyFifthPercentile"

EXP_WAUP,               "WeightedAverageUnitPrice,StandardItemKey,ImportDate,"
EXP_WAUP,               "AreaKey,QuantityLevel,WorkType,"
EXP_WAUP,               "WeightedAverageUnitPrice"

EXP_PEMETHREG,          "PEMETHRegression,StandardItemKey,ImportDate,"
EXP_PEMETHREG,          "AreaTypeKey,MinimumQuantity,MaximumQuantity,"
EXP_PEMETHREG,          "MedianQuantity,BaseUnitPrice,AnnualInflation,"
EXP_PEMETHREG,          "QuantityAdjustment"

EXP_SEASONADJ,          "SeasonAdjustment,StandardItemKey,Season,ImportDate,"
EXP_SEASONADJ,          "Adjustment"

EXP_WORKTYPEADJ,        "WorkTypeAdjustment,StandardItemKey,ImportDate,"
EXP_WORKTYPEADJ,        "WorkType,Adjustment"

EXP_AREAADJ,            "AreaAdjustment,StandardItemKey,ImportDate,"
EXP_AREAADJ,            "AreaKey,Adjustment"

EXP_PROGRAM,            "Program,ProgramID,Description,StartDate,"
EXP_PROGRAM,            "EndDate,TotalCost,TotalAdjustedForInflation"

EXP_PROGRAMFUND,        "ProgramFund,ProgramKey,FundKey,"
EXP_PROGRAMFUND,        "PercentFunded,AmountFunded"

EXP_PROGRAMUSER,        "ProgramUser,ProgramKey,UserID,AccessPrivilege"

EXP_PROGRAMJOB,         "ProgramJob,JobKey,ProgramKey,LettingDate,"
EXP_PROGRAMJOB,         "WorkBeginDate,WorkEndDate,Priority,"
EXP_PROGRAMJOB,         "InflationPredictionKey,"
EXP_PROGRAMJOB,         "EstimateTotalAdjForInflation"

EXP_PROGRAMJOBDEPEND,   "ProgramJobDependency,PredecessorJobKey,"
EXP_PROGRAMJOBDEPEND,   "SuccessorJobKey,Link,Lag,Delay"

EXP_INFLATIONPRED,      "InflationPrediction,InflationPredictionID,"
EXP_INFLATIONPRED,      "InitialPrediction,Comment"

EXP_INFLATIONCHANGE,    "InflationChange,InflationPredictionKey,"
EXP_INFLATIONCHANGE,    "ChangeDate,InflationRate,Comment"

EXP_STANDARDITEM,       "StandardItem,StandardItemNumber,SpecYear,"
EXP_STANDARDITEM,       "ShortDescription,LongDescription,Unit,"
EXP_STANDARDITEM,       "LumpSum,DefaultProductionRate,"
EXP_STANDARDITEM,       "DefaultStartTime,RoundingPrecision,UnitType"

EXP_STANDARDITEMDEPEND, "StandardItemDependency,PredecessorItemKey,"
EXP_STANDARDITEMDEPEND, "SuccessorItemKey,Link,Lag"

EXP_VENDOR,             "Vendor,VendorID,ShortName,Name,Type,"
EXP_VENDOR,             "Certification,DBEClassification"

EXP_VENDORADDRESS,      "VendorAddress,VendorKey,AddressSequenceNumber,"
EXP_VENDORADDRESS,      "Address,City,State,ZipCode,PhoneNumber,Location"

EXP_VENDORCLASS,        "VendorClassification,VendorKey,VendorClassification"


:query expquery.bin
/* BAMS/CES Jobs */
EXP_JOB,                " SELECT 'Job',"
EXP_JOB,                " J.JobID,J.Description,J.SpecYear,J.Location,"
EXP_JOB,                " C.CountyID,CVD.CodeValueID,J.DavisBaconWages,"
EXP_JOB,                " J.BaseDate,J.LettingMonth,CVW.CodeValueID,"
EXP_JOB,                " J.ConstructionEngineeringPct,"
EXP_JOB,                " J.ContingencyPercent,J.EstimatedCost,"
EXP_JOB,                " J.EstimateTotal,J.Duration,WDC.WorkingDayCalendarID,"
EXP_JOB,                " UE.UserID,J.DateCreated,J.LastUpdate,"
EXP_JOB,                " UC.UserID,UA.UserID"
EXP_JOB,                " FROM Job J, County C, CodeValue CVD,"
EXP_JOB,                " CodeValue CVW, WorkingDayCalendar WDC,"
EXP_JOB,                " User UE, User UC, User UA"
EXP_JOB,                " WHERE J.PrimaryCountyKey = C.CountyKey"
EXP_JOB,                " AND J.District = CVD.CodeValueKey"
EXP_JOB,                " AND J.WorkType = CVW.CodeValueKey"
EXP_JOB,                " AND J.WorkingDayCalendarKey = WDC.WorkingDayCalendarKey"
EXP_JOB,                " AND J.Estimator = UE.UserKey"
EXP_JOB,                " AND J.CheckedBy = UC.UserKey"
EXP_JOB,                " AND J.ApprovedBy = UA.UserKey"
EXP_JOB,                " %Where"

EXP_JOBUSER,            " SELECT 'JobUser',J.JobID,JU.UserID,JU.AccessPrivilege"
EXP_JOBUSER,            " FROM JobUser JU, Job J"
EXP_JOBUSER,            " WHERE J.JobKey = JU.JobKey"
EXP_JOBUSER,            " %Where"

EXP_JOBALTGROUP,        " SELECT 'JobAlternateGroup',"
EXP_JOBALTGROUP,        " J.JobID,JAG.JobAlternateGroupID,"
EXP_JOBALTGROUP,        " JAG.Description,JA.JobAlternateID,JAG.Estimate"
EXP_JOBALTGROUP,        " FROM Job J, JobAlternateGroup JAG,"
EXP_JOBALTGROUP,        " JobAlternate JA"
EXP_JOBALTGROUP,        " WHERE J.JobKey = JAG.JobKey"
EXP_JOBALTGROUP,        " AND J.JobKey = JA.JobKey"
EXP_JOBALTGROUP,        " AND JAG.JobAlternateGroupKey = JA.JobAlternateGroupKey"
EXP_JOBALTGROUP,        " AND JAG.ChosenAlternateKey = JA.JobAlternateKey"
EXP_JOBALTGROUP,        " %Where"

EXP_JOBALT,             " SELECT 'JobAlternate',"
EXP_JOBALT,             " J.JobID,JAG.JobAlternateGroupID,"
EXP_JOBALT,             " JA.Description,JA.JobAlternateID,JAG.Estimate"
EXP_JOBALT,             " FROM Job J, JobAlternateGroup JAG,"
EXP_JOBALT,             " JobAlternate JA"
EXP_JOBALT,             " WHERE J.JobKey = JAG.JobKey"
EXP_JOBALT,             " AND J.JobKey = JA.JobKey"
EXP_JOBALT,             " AND JAG.JobAlternateGroupKey = JA.JobAlternateGroupKey"
EXP_JOBALT,             " %Where"

EXP_JOBCOMMENT,         " SELECT 'JobComment',"
EXP_JOBCOMMENT,         " J.JobID,JC.CommentDate,JC.CommentTime,"
EXP_JOBCOMMENT,         " U.UserID,LT.ShortText,JC.ArchiveCopyFileName"
EXP_JOBCOMMENT,         " FROM Job J, JobComment JC, User U, LongText LT"
EXP_JOBCOMMENT,         " WHERE J.JobKey = JC.JobKey"
EXP_JOBCOMMENT,         " AND JC.Estimator = U.UserKey"
EXP_JOBCOMMENT,         " AND JC.Comment = LT.LongTextKey"
EXP_JOBCOMMENT,         " %Where"

EXP_JOBBREAK,           " SELECT 'JobBreakdown',"
EXP_JOBBREAK,           " J.JobID,JB.JobBreakdownID,JB.Description,"
EXP_JOBBREAK,           " JB.PreliminaryEstimateCost,JB.DetailedEstimateCost,"
EXP_JOBBREAK,           " JB.DetailedEstimate,BEM.BreakdownEstimationMethodID,"
EXP_JOBBREAK,           " JB.Length,JB.PavementWidth,JB.PavementDepth,CVR.CodeValueID,"
EXP_JOBBREAK,           " CVS.CodeValueID,JB.StructureID,JB.StructureLength,"
EXP_JOBBREAK,           " JB.StructureWidth,CVW.CodeValueID"
EXP_JOBBREAK,           " FROM Job J, JobBreakdown JB, CodeValue CVR,"
EXP_JOBBREAK,           " CodeValue CVS, CodeValue CVW,"
EXP_JOBBREAK,           " BreakdownEstimationMethod BEM"
EXP_JOBBREAK,           " WHERE J.JobKey = JB.JobKey"
EXP_JOBBREAK,           " AND JB.RoadType = CVR.CodeValueKey"
EXP_JOBBREAK,           " AND JB.WorkType = CVW.CodeValueKey"
EXP_JOBBREAK,           " AND JB.StructureType = CVS.CodeValueKey"
EXP_JOBBREAK,           " AND JB.BreakdownEstimationMethod = BEM.BreakdownEstimationMethodKey"
EXP_JOBBREAK,           " %Where"

EXP_JOBBREAKFUND,       " SELECT 'JobBreakdownFund',"
EXP_JOBBREAKFUND,       " J.JobID,JB.JobBreakdownID,F.FundID,"
EXP_JOBBREAKFUND,       " JBF.PercentFunded,JBF.AmountFunded"
EXP_JOBBREAKFUND,       " FROM Job J, JobBreakdown JB, JobBreakdownFund JBF,"
EXP_JOBBREAKFUND,       " Fund F"
EXP_JOBBREAKFUND,       " WHERE J.JobKey = JB.JobBreakdownKey"
EXP_JOBBREAKFUND,       " AND J.JobKey = JBF.JobKey"
EXP_JOBBREAKFUND,       " AND JB.JobBreakdownKey = JBF.JobBreakdownKey"
EXP_JOBBREAKFUND,       " AND JBF.FundKey = F.FundKey"
EXP_JOBBREAKFUND,       " %Where"

EXP_JOBITEM,            " SELECT 'JobItem',"
EXP_JOBITEM,            " J.JobID,JI.JobItemKey,JB.JobBreakdownID,"
EXP_JOBITEM,            " SI.StandardItemNumber,"
EXP_JOBITEM,            " JAG.JobAlternateGroupID,JA.JobAlternateID,"
EXP_JOBITEM,            " JI.Quantity,JI.UnitPrice,JI.ExtendedAmount,"
EXP_JOBITEM,            " IEM.ItemEstimationMethodID,JI.EstimationComment,"
EXP_JOBITEM,            " JI.SupplementalDescription,JI.Duration,"
EXP_JOBITEM,            " JI.DaysElapsedBeforeStart"
EXP_JOBITEM,            " FROM Job J, JobBreakdown JB, JobItem JI,"
EXP_JOBITEM,            " StandardItem SI, JobAlternateGroup JAG,"
EXP_JOBITEM,            " JobAlternate JA, ItemEstimationMethod IEM"
EXP_JOBITEM,            " WHERE J.JobKey = JB.JobKey"
EXP_JOBITEM,            " AND   J.JobKey = JI.JobKey"
EXP_JOBITEM,            " AND JB.JobBreakdownKey = JI.JobBreakdownKey"
EXP_JOBITEM,            " AND JAG.JobAlternateGroupKey = JI.JobAlternateGroupKey"
EXP_JOBITEM,            " AND JA.JobAlternateKey = JI.JobAlternateKey"
EXP_JOBITEM,            " AND SI.StandardItemKey = JI.StandardItemKey"
EXP_JOBITEM,            " AND IEM.ItemEstimationMethodKey = JI.ItemEstimationMethodKey"
EXP_JOBITEM,            " %Where"

EXP_JOBITEMDEP,         " SELECT 'JobItemDependency',"
EXP_JOBITEMDEP,         " J.JobID,"
EXP_JOBITEMDEP,         " JID.PredecessorJobItemKey,"
EXP_JOBITEMDEP,         " JID.SuccessorJobItemKey,"
EXP_JOBITEMDEP,         " JID.Link,JID.Lag,JID.Delay"
EXP_JOBITEMDEP,         " FROM Job J, JobItemDependency JID"
EXP_JOBITEMDEP,         " WHERE J.JobKey = JID.JobKey"
EXP_JOBITEMDEP,         " %Where"

EXP_WORKINGDAYCAL,      " SELECT DISTINCT 'WorkingDayCalendar',"
EXP_WORKINGDAYCAL,      " WDC.WorkingDayCalendarID, WDC.Description"
EXP_WORKINGDAYCAL,      " FROM WorkingDayCalendar WDC, Job J"
EXP_WORKINGDAYCAL,      " WHERE J.WorkingDayCalendarKey = WDC.WorkingDayCalendarKey"
EXP_WORKINGDAYCAL,      " %Where"

EXP_WORKINGDAYPRE,      " SELECT DISTINCT 'WorkingDayPrediction',"
EXP_WORKINGDAYPRE,      " WDC.WorkingDayCalendarID,WDP.Year,"
EXP_WORKINGDAYPRE,      " WDP.Month,WDP.WorkingDays"
EXP_WORKINGDAYPRE,      " FROM WorkingDayCalendar WDC, "
EXP_WORKINGDAYPRE,      " WorkingDayPrediction WDP, Job J"
EXP_WORKINGDAYPRE,      " WHERE J.WorkingDayCalendarKey = WDC.WorkingDayCalendarKey"
EXP_WORKINGDAYPRE,      " AND WDP.WorkingDayCalendarKey = WDC.WorkingDayCalendarKey"
EXP_WORKINGDAYPRE,      " %Where"

EXP_JOBBREAKPROF,       " SELECT 'JobBreakdownProfile',"
EXP_JOBBREAKPROF,       " J.JobID,JB.JobBreakdownID,PP.ProfileID"
EXP_JOBBREAKPROF,       " FROM Job J, JobBreakdown JB, JobBreakdownProfile JBP,"
EXP_JOBBREAKPROF,       " ParametricProfile PP"
EXP_JOBBREAKPROF,       " WHERE J.JobKey = JB.JobKey"
EXP_JOBBREAKPROF,       " AND J.JobKey = JBP.JobKey"
EXP_JOBBREAKPROF,       " AND JB.JobBreakdownKey = JBP.JobBreakdownKey"
EXP_JOBBREAKPROF,       " AND PP.ProfileKey = JBP.ProfileKey"
EXP_JOBBREAKPROF,       " %Where"

EXP_JOBBREAKMAJORITEM,  " SELECT 'JobBreakdownMajorItem',"
EXP_JOBBREAKMAJORITEM,  " J.JobID,JB.JobBreakdownID,"
EXP_JOBBREAKMAJORITEM,  " MI.MajorItemID,JBMI.Quantity,JBMI.QuantityLock,"
EXP_JOBBREAKMAJORITEM,  " JBMI.UnitPrice,JBMI.UnitPriceLock,"
EXP_JOBBREAKMAJORITEM,  " JBMI.ExtendedAmount"
EXP_JOBBREAKMAJORITEM,  " FROM Job J, JobBreakdown JB, MajorItem MI,"
EXP_JOBBREAKMAJORITEM,  " JobBreakdownMajorItem JBMI"
EXP_JOBBREAKMAJORITEM,  " WHERE J.JobKey = JB.JobKey"
EXP_JOBBREAKMAJORITEM,  " AND J.JobKey = JBMI.JobKey"
EXP_JOBBREAKMAJORITEM,  " AND JB.JobBreakdownKey = JBMI.JobBreakdownKey"
EXP_JOBBREAKMAJORITEM,  " AND MI.MajorItemKey = JBMI.MajorItemKey"
EXP_JOBBREAKMAJORITEM,  " %Where"

EXP_JOBCBE,             " SELECT 'JobCostBasedEstimate',"
EXP_JOBCBE,             " J.JobID,JI.JobItemKey,"
EXP_JOBCBE,             " JCBE.JobItemCostBasedEstimateKey,"
EXP_JOBCBE,             " JCBE.CostBasedEstimateID,"
EXP_JOBCBE,             " JCBE.Description,JCBE.Active"
EXP_JOBCBE,             " FROM Job J, JobItem JI,"
EXP_JOBCBE,             " JobCostBasedEstimate JCBE"
EXP_JOBCBE,             " WHERE J.JobKey = JI.JobKey"
EXP_JOBCBE,             " AND JCBE.JobKey = J.JobKey"
EXP_JOBCBE,             " AND JCBE.JobItemKey = JI.JobItemKey"
EXP_JOBCBE,             " %Where"

EXP_JOBCOSTSHEET,       " SELECT 'JobCostSheet',J.JobID,JCS.TaskID,"
EXP_JOBCOSTSHEET,       " JCS.JobCostSheetKey,"
EXP_JOBCOSTSHEET,       " JCS.JobItemCostBasedEstimateKey,"
EXP_JOBCOSTSHEET,       " JCS.TaskDescription,JCS.CostSheetID,"
EXP_JOBCOSTSHEET,       " JCS.Description,JCS.ProductionRate,"
EXP_JOBCOSTSHEET,       " JCS.ProductionGranularity,JCS.HoursPerDay,"
EXP_JOBCOSTSHEET,       " JCS.OvertimeHoursPerDay,JCS.LaborDailyCost,"
EXP_JOBCOSTSHEET,       " JCS.EquipmentDailyCost,JCS.MaterialsUnitCost,"
EXP_JOBCOSTSHEET,       " JCS.MarkUpPct,JCS.LaborOverheadPct,"
EXP_JOBCOSTSHEET,       " JCS.MaterialsOverheadPct,JCS.EquipmentOverheadPct,"
EXP_JOBCOSTSHEET,       " JCS.QuantityPerItemUnit,CVU.CodeValueID,"
EXP_JOBCOSTSHEET,       " JCS.UnitPrice"
EXP_JOBCOSTSHEET,       " FROM Job J, CodeValue CVU, JobCostSheet JCS"
EXP_JOBCOSTSHEET,       " WHERE J.JobKey        = JCS.JobKey"
EXP_JOBCOSTSHEET,       " AND JCS.Unit          = CVU.CodeValueKey"
EXP_JOBCOSTSHEET,       " %Where"

EXP_JOBCREWUSED,        " SELECT 'JobCrewUsed',J.JobID,JCU.JobCostSheetKey,"
EXP_JOBCREWUSED,        " JCU.JobCrewKey, JCU.CrewID,JCU.Description"
EXP_JOBCREWUSED,        " FROM Job J, JobCrewUsed JCU"
EXP_JOBCREWUSED,        " WHERE J.JobKey = JCU.JobKey"
EXP_JOBCREWUSED,        " %Where"

EXP_JOBCREWEQUIPMENTUSED," SELECT 'JobCrewEquipmentUsed',J.JobID,"
EXP_JOBCREWEQUIPMENTUSED," JCEU.JobCostSheetKey,"
EXP_JOBCREWEQUIPMENTUSED," JCEU.JobCrewKey,E.EquipmentID,JCEU.Quantity,"
EXP_JOBCREWEQUIPMENTUSED," JCEU.Rate,JCEU.OvertimeRate"
EXP_JOBCREWEQUIPMENTUSED," FROM Job J, JobCrewEquipmentUsed JCEU,"
EXP_JOBCREWEQUIPMENTUSED," Equipment E"
EXP_JOBCREWEQUIPMENTUSED," WHERE J.JobKey = JCEU.JobKey"
EXP_JOBCREWEQUIPMENTUSED," AND JCEU.EquipmentKey = E.EquipmentKey"
EXP_JOBCREWEQUIPMENTUSED," %Where"

EXP_JOBCREWLABORUSED,   " SELECT 'JobCrewLaborUsed',J.JobID,"
EXP_JOBCREWLABORUSED,   " JCLU.JobCostSheetKey,JCLU.JobCrewKey,"
EXP_JOBCREWLABORUSED,   " L.LaborerID,JCLU.Quantity,JCLU.Rate,JCLU.OvertimeRate"
EXP_JOBCREWLABORUSED,   " FROM Job J, JobCrewLaborUsed JCLU,"
EXP_JOBCREWLABORUSED,   " Labor L"
EXP_JOBCREWLABORUSED,   " WHERE J.JobKey = JCLU.JobKey"
EXP_JOBCREWLABORUSED,   " AND JCLU.LaborerKey = L.LaborerKey"
EXP_JOBCREWLABORUSED,   " %Where"


EXP_JOBMATERIALUSED,    " SELECT 'JobMaterialUsed',J.JobID,"
EXP_JOBMATERIALUSED,    " JMU.JobCostSheetKey,"
EXP_JOBMATERIALUSED,    " M.MaterialID,JMU.Quantity,JMU.Unit,JMU.UnitPrice"
EXP_JOBMATERIALUSED,    " FROM Job J, JobMaterialUsed JMU, Material M"
EXP_JOBMATERIALUSED,    " WHERE J.JobKey = JMU.JobKey"
EXP_JOBMATERIALUSED,    " AND JMU.MaterialKey = M.MaterialKey"
EXP_JOBMATERIALUSED,    " %Where"



/* area types/areas and that ilk */
EXP_AREATYPE,           " SELECT 'AreaType',AT.AreaTypeID,AT.Description"
EXP_AREATYPE,           " FROM AreaType AT"
EXP_AREATYPE,           " WHERE 1=1"
EXP_AREATYPE,           " %Where"

EXP_AREA,               " SELECT 'Area',AT.AreaTypeID,A.AreaID,A.Description"
EXP_AREA,               " FROM AreaType AT, Area A"
EXP_AREA,               " WHERE AT.AreaTypeKey = A.AreaTypeKey"
EXP_AREA,               " %Where"

EXP_AREACOUNTY,         " SELECT 'AreaCounty',AT.AreaTypeID,A.AreaID,"
EXP_AREACOUNTY,         " C.CountyID,AC.BaseDate"
EXP_AREACOUNTY,         " FROM AreaType AT, Area A, AreaCounty AC,"
EXP_AREACOUNTY,         " County C"
EXP_AREACOUNTY,         " WHERE AT.AreaTypeKey = A.AreaTypeKey"
EXP_AREACOUNTY,         " AND AT.AreaTypeKey = AC.AreaTypeKey"
EXP_AREACOUNTY,         " AND A.AreaKey = AC.AreaKey"
EXP_AREACOUNTY,         " AND AC.CountyKey = C.CountyKey"
EXP_AREACOUNTY,         " %Where"

EXP_COUNTY,             " SELECT 'County',C.CountyID,C.Name"
EXP_COUNTY,             " FROM County C"
EXP_COUNTY,             " WHERE 1=1"
EXP_COUNTY,             " %Where"

EXP_COUNTYMAP,          " SELECT 'CountyMap',C.CountyID,M.MapID"
EXP_COUNTYMAP,          " FROM County C, CountyMap CM, Map M"
EXP_COUNTYMAP,          " WHERE C.CountyKey=CM.CountyKey"
EXP_COUNTYMAP,          " AND CM.CountyKey=M.MapKey"
EXP_COUNTYMAP,          " %Where"

EXP_MAP,                " SELECT DISTINCT 'Map',M.MapID,M.Description"
EXP_MAP,                " FROM Map M, MapVertex MV"
EXP_MAP,                " WHERE 1=1 AND M.MapKey=MV.MapKey "
EXP_MAP,                " %Where"

EXP_MAPVERTEX,          " SELECT 'MapVertex',M.MapID,MV.VertexOrder,MV.Vertex"
EXP_MAPVERTEX,          " FROM Map M, MapVertex MV"
EXP_MAPVERTEX,          " WHERE M.MapKey=MV.MapKey"
EXP_MAPVERTEX,          " %Where"

EXP_ZONETYPE,           " SELECT 'ZoneType',ZT.ZoneTypeID,ZT.Description"
EXP_ZONETYPE,           " FROM ZoneType ZT"
EXP_ZONETYPE,           " WHERE 1=1"
EXP_ZONETYPE,           " %Where"

EXP_ZONE,               " SELECT 'Zone',ZT.ZoneTypeID,Z.ZoneID,Z.Description"
EXP_ZONE,               " FROM ZoneType ZT, Zone Z"
EXP_ZONE,               " WHERE ZT.ZoneTypeKey = Z.ZoneTypeKey"
EXP_ZONE,               " %Where"

EXP_ZONEMAP,            " SELECT 'ZoneMap',ZT.ZoneTypeID,Z.ZoneID,M.MapID,"
EXP_ZONEMAP,            " ZM.BaseDate"
EXP_ZONEMAP,            " FROM ZoneType ZT, Zone Z, Map M, ZoneMap ZM"
EXP_ZONEMAP,            " WHERE ZT.ZoneTypeKey = Z.ZoneKey"
EXP_ZONEMAP,            " AND ZT.ZoneTypeKey = ZM.ZoneTypeKey"
EXP_ZONEMAP,            " AND Z.ZoneKey = ZM.ZoneKey"
EXP_ZONEMAP,            " AND ZM.MapKey = M.MapKey"
EXP_ZONEMAP,            " %Where"

EXP_CODETABLE,          " SELECT 'CodeTable',CT.CodeTableID,CT.Description,"
EXP_CODETABLE,          " CT.MaximumCodeLength"
EXP_CODETABLE,          " FROM CodeTable CT"
EXP_CODETABLE,          " WHERE 1=1"
EXP_CODETABLE,          " %Where"

EXP_CODEVALUE,          " SELECT 'CodeValue',CT.CodeTableID,CV.CodeValueID,"
EXP_CODEVALUE,          " CV.Translation"
EXP_CODEVALUE,          " FROM CodeTable CT, CodeValue CV"
EXP_CODEVALUE,          " WHERE CT.CodeTableKey = CV.CodeTableKey"
EXP_CODEVALUE,          " %Where"

EXP_FUND,               " SELECT 'Fund',F.FundID,F.Name,F.Description"
EXP_FUND,               " FROM Fund F"
EXP_FUND,               " WHERE 1=1"
EXP_FUND,               " %Where"

EXP_DEFAULT,            " SELECT 'StdItemDefaultPrices',"
EXP_DEFAULT,            " SI.StandardItemNumber + CONVERT (varchar (4), SI.SpecYear),"
EXP_DEFAULT,            " SIDP.BaseDate,SIDP.Description,SIDP.UnitPrice"
EXP_DEFAULT,            " FROM StdItemDefaultPrices SIDP,"
EXP_DEFAULT,            " StandardItem SI"
EXP_DEFAULT,            " WHERE SIDP.StandardItemKey=SI.StandardItemKey"
EXP_DEFAULT,            " %Where"

EXP_USER,               " SELECT 'User',U.UserID,U.Name,U.Password,"
EXP_USER,               " U.PhoneNumber,U.Type"
EXP_USER,               " FROM User U"
EXP_USER,               " WHERE 1=1"
EXP_USER,               " %Where"

EXP_USERCATALOG,        " SELECT 'UserCatalog',U.UserID,C.CatalogID,"
EXP_USERCATALOG,        " UC.Permission"
EXP_USERCATALOG,        " FROM User U, UserCatalog UC, Catalog C"
EXP_USERCATALOG,        " WHERE U.UserKey = UC.UserKey"
EXP_USERCATALOG,        " AND UC.CatalogKey = C.CatalogKey"
EXP_USERCATALOG,        " %Where"

EXP_USERAPPLICATION,    " SELECT 'UserApplication',U.UserID,A.ApplicationID"
EXP_USERAPPLICATION,    " FROM User U, Application A, UserApplication UA"
EXP_USERAPPLICATION,    " WHERE U.UserKey = UA.UserKey"
EXP_USERAPPLICATION,    " AND UA.ApplicationKey = A.ApplicationKey"
EXP_USERAPPLICATION,    " %Where"

EXP_DEFAULTJOBUSER,     " SELECT 'DefaultJobUser',U.UserID,"
EXP_DEFAULTJOBUSER,     " DJU.UserGrantedPrivilege,DJU.AccessPrivilege"
EXP_DEFAULTJOBUSER,     " FROM User U, DefaultJobUser DJU"
EXP_DEFAULTJOBUSER,     " WHERE U.UserKey = DJU.UserKey"
EXP_DEFAULTJOBUSER,     " %Where"

EXP_DEFAULTPROGRAMUSER, " SELECT 'DefaultProgramUser',U.UserID,"
EXP_DEFAULTPROGRAMUSER, " DPU.UserGrantedPrivilege,DPU.AccessPrivilege"
EXP_DEFAULTPROGRAMUSER, " FROM User U, DefaultProgramUser DPU"
EXP_DEFAULTPROGRAMUSER, " WHERE U.UserKey = DPU.UserKey"
EXP_DEFAULTPROGRAMUSER, " %Where"

/* cost based estimates */
EXP_CBE,                " SELECT 'StandardItemCostBasedEstimate',"
EXP_CBE,                " SI.StandardItemNumber + CONVERT (varchar (4), SI.SpecYear),"
EXP_CBE,                " CBE.CostBasedEstimateID,CBE.Description,CBE.Active"
EXP_CBE,                " FROM StandardItem SI, CostBasedEstimate CBE"
EXP_CBE,                " WHERE CBE.StandardItemKey = SI.StandardItemKey"
EXP_CBE,                " %Where"

EXP_TASK,               " SELECT 'Task',CBE.CostBasedEstimateID,"
EXP_TASK,               " CS.CostSheetID,T.TaskID,T.Description,"
EXP_TASK,               " T.ProductionAdjustment,"
EXP_TASK,               " T.MaterialQuantityAdjustment,CVU.CodeValueID,"
EXP_TASK,               " T.QuantityPerItemUnit"
EXP_TASK,               " FROM Task T, CostBasedEstimate CBE, "
EXP_TASK,               " CostSheet CS, CodeValue CVU"
EXP_TASK,               " WHERE T.CostBasedEstimateKey= CBE.CostBasedEstimateKey"
EXP_TASK,               " AND T.CostSheetKey          = CS.CostSheetKey"
EXP_TASK,               " AND T.Unit                  = CVU.CodeValueKey"
EXP_TASK,               " %Where"

EXP_CBECOSTSHEET,       " SELECT 'CostSheet',CS.CostSheetID,CS.Description,"
EXP_CBECOSTSHEET,       " CS.ProductionRate,CS.DefaultHoursPerDay,"
EXP_CBECOSTSHEET,       " CS.ProductionGranularity,CS.MarkUpPct,"
EXP_CBECOSTSHEET,       " CS.LaborOverheadPct,CS.EquipmentOverheadPct,"
EXP_CBECOSTSHEET,       " CS.MaterialsOverheadPct"
EXP_CBECOSTSHEET,       " FROM CostBasedEstimate CBE, Task T,"
EXP_CBECOSTSHEET,       " CostSheet CS"
EXP_CBECOSTSHEET,       " WHERE T.CostBasedEstimateKey= CBE.CostBasedEstimateKey"
EXP_CBECOSTSHEET,       " AND T.CostSheetKey          = CS.CostSheetKey"
EXP_CBECOSTSHEET,       " %Where"

EXP_CBECREWUSED,        " SELECT 'CrewUsed',CS.CostSheetID,"
EXP_CBECREWUSED,        " CU.CostSheetCrewID,CU.Description"
EXP_CBECREWUSED,        " FROM CostBasedEstimate CBE, Task T,"
EXP_CBECREWUSED,        " CostSheet CS, CrewUsed CU"
EXP_CBECREWUSED,        " WHERE T.CostBasedEstimateKey= CBE.CostBasedEstimateKey"
EXP_CBECREWUSED,        " AND T.CostSheetKey          = CS.CostSheetKey"
EXP_CBECREWUSED,        " AND CS.CostSheetKey         = CU.CostSheetKey"
EXP_CBECREWUSED,        " %Where"

EXP_CBECREWEQUIPMENTUSED," SELECT 'CrewEquipmentUsed',CS.CostSheetID,"
EXP_CBECREWEQUIPMENTUSED," CU.CostSheetCrewID,"
EXP_CBECREWEQUIPMENTUSED," E.EquipmentID,CEU.Quantity"
EXP_CBECREWEQUIPMENTUSED," FROM CostBasedEstimate CBE, Task T,"
EXP_CBECREWEQUIPMENTUSED," CostSheet CS, CrewUsed CU, CrewEquipmentUsed CEU,"
EXP_CBECREWEQUIPMENTUSED," Equipment E"
EXP_CBECREWEQUIPMENTUSED," WHERE T.CostBasedEstimateKey = CBE.CostBasedEstimateKey"
EXP_CBECREWEQUIPMENTUSED," AND T.CostSheetKey          = CS.CostSheetKey"
EXP_CBECREWEQUIPMENTUSED," AND CS.CostSheetKey         = CU.CostSheetKey"
EXP_CBECREWEQUIPMENTUSED," AND CU.CostSheetCrewKey     = CEU.CostSheetCrewKey"
EXP_CBECREWEQUIPMENTUSED," AND CEU.EquipmentKey        = E.EquipmentKey"
EXP_CBECREWEQUIPMENTUSED," %Where"

EXP_CBECREWLABORUSED,   " SELECT 'CrewLaborUsed',CS.CostSheetID,"
EXP_CBECREWLABORUSED,   " CU.CostSheetCrewID,"
EXP_CBECREWLABORUSED,   " L.LaborerID,CLU.Quantity"
EXP_CBECREWLABORUSED,   " FROM CostBasedEstimate CBE, Task T,"
EXP_CBECREWLABORUSED,   " CostSheet CS, CrewUsed CU, CrewLaborUsed CLU,"
EXP_CBECREWLABORUSED,   " Labor L"
EXP_CBECREWLABORUSED,   " WHERE T.CostBasedEstimateKey = CBE.CostBasedEstimateKey"
EXP_CBECREWLABORUSED,   " AND T.CostSheetKey          = CS.CostSheetKey"
EXP_CBECREWLABORUSED,   " AND CS.CostSheetKey         = CU.CostSheetKey"
EXP_CBECREWLABORUSED,   " AND CU.CostSheetCrewKey     = CLU.CostSheetCrewKey"
EXP_CBECREWLABORUSED,   " AND CLU.LaborerKey          = L.LaborerKey"
EXP_CBECREWLABORUSED,   " %Where"

EXP_CBEMATERIALUSED,    " SELECT 'MaterialUsed',CS.CostSheetID,"
EXP_CBEMATERIALUSED,    " M.MaterialID,MU.Quantity"
EXP_CBEMATERIALUSED,    " FROM CostBasedEstimate CBE, Task T,"
EXP_CBEMATERIALUSED,    " CostSheet CS, MaterialUsed MU, "
EXP_CBEMATERIALUSED,    " Material M"
EXP_CBEMATERIALUSED,    " WHERE T.CostBasedEstimateKey = CBE.CostBasedEstimateKey"
EXP_CBEMATERIALUSED,    " AND T.CostSheetKey          = CS.CostSheetKey"
EXP_CBEMATERIALUSED,    " AND CS.CostSheetKey         = MU.CostSheetKey"
EXP_CBEMATERIALUSED,    " AND MU.MaterialKey          = M.MaterialKey"
EXP_CBEMATERIALUSED,    " %Where"

/* crew catalog */
EXP_CREW,               " SELECT 'CrewUsed',C.CrewID,C.Description"
EXP_CREW,               " FROM Crew C"
EXP_CREW,               " WHERE 1=1"
EXP_CREW,               " %Where"

EXP_CREWEQUIPMENT,      " SELECT 'CrewEquipment',C.CrewID,"
EXP_CREWEQUIPMENT,      " E.EquipmentID,CE.Quantity"
EXP_CREWEQUIPMENT,      " FROM CrewEquipment CE, Crew C, Equipment E"
EXP_CREWEQUIPMENT,      " WHERE C.CrewKey = CE.CrewKey"
EXP_CREWEQUIPMENT,      " AND CE.EquipmentKey = E.EquipmentKey"
EXP_CREWEQUIPMENT,      " %Where"

EXP_CREWLABOR,          " SELECT 'CrewLabor',C.CrewID,"
EXP_CREWLABOR,          " L.LaborerID,CL.Quantity"
EXP_CREWLABOR,          " FROM CrewLabor CL, Crew C, Labor L"
EXP_CREWLABOR,          " WHERE C.CrewKey = CL.CrewKey"
EXP_CREWLABOR,          " AND CL.LaborerKey = L.LaborerKey"
EXP_CREWLABOR,          " %Where"

/* labor equipment, materials */

EXP_EQUIPMENT,          " SELECT distinct 'Equipment',E.EquipmentID,E.Description,"
EXP_EQUIPMENT,          " ZT.ZoneTypeID"
EXP_EQUIPMENT,          " FROM Equipment E, ZoneType ZT"
EXP_EQUIPMENT,          " WHERE E.ZoneTypeKey = ZT.ZoneTypeKey"
EXP_EQUIPMENT,          " %Where"

EXP_EQUIPMENTRATE,      " SELECT distinct 'EquipmentRate',E.EquipmentID"
EXP_EQUIPMENTRATE,      " ,ZT.ZoneTypeID,Z.ZoneID,ER.Rate,ER.OvertimeRate"
EXP_EQUIPMENTRATE,      " FROM Equipment E, ZoneType ZT, "
EXP_EQUIPMENTRATE,      " EquipmentRate ER, Zone Z"
EXP_EQUIPMENTRATE,      " WHERE E.ZoneTypeKey = ZT.ZoneTypeKey"
EXP_EQUIPMENTRATE,      " AND E.EquipmentKey = ER.EquipmentKey"
EXP_EQUIPMENTRATE,      " AND ER.ZoneKey = Z.ZoneKey"
EXP_EQUIPMENTRATE,      " AND ZT.ZoneTypeKey = Z.ZoneTypeKey"
EXP_EQUIPMENTRATE,      " AND ER.Rate >  0.0 AND ER.OvertimeRate > 0.0"
EXP_EQUIPMENTRATE,      " %Where"

EXP_LABOR,              " SELECT distinct 'Labor',L.LaborerID,L.Description,"
EXP_LABOR,              " ZT.ZoneTypeID"
EXP_LABOR,              " FROM Labor L, ZoneType ZT"
EXP_LABOR,              " WHERE L.ZoneTypeKey = ZT.ZoneTypeKey"
EXP_LABOR,              " %Where"

EXP_LABORERWAGE,        " SELECT distinct 'LaborerWageAndBenefits',L.LaborerID,Z.ZoneID,"
EXP_LABORERWAGE,        " LW.DavisBaconRate,LW.DavisBaconOvertimeRate,"
EXP_LABORERWAGE,        " LW.NonDavisBaconRate,LW.NonDavisBaconOvertimeRate"
EXP_LABORERWAGE,        " FROM Labor L, ZoneType ZT, "
EXP_LABORERWAGE,        " LaborerWageAndBenefits LW, Zone Z"
EXP_LABORERWAGE,        " WHERE L.ZoneTypeKey = ZT.ZoneTypeKey"
EXP_LABORERWAGE,        " AND L.LaborerKey    = LW.LaborerKey"
EXP_LABORERWAGE,        " AND LW.ZoneKey      = Z.ZoneKey"
EXP_LABORERWAGE,        " AND ZT.ZoneTypeKey  = Z.ZoneTypeKey"
EXP_LABORERWAGE,        " and LW.DavisBaconRate > 0.0 and LW.DavisBaconOvertimeRate > 0.0"
EXP_LABORERWAGE,        " and LW.NonDavisBaconRate > 0.0 and LW.NonDavisBaconOvertimeRate > 0.0"
EXP_LABORERWAGE,        " %Where"

EXP_MATERIAL,           " SELECT  distinct 'Material',M.MaterialID,M.Description,"
EXP_MATERIAL,           " ZT.ZoneTypeID,CVU.CodeValueID"
EXP_MATERIAL,           " FROM Material M, ZoneType ZT, CodeValue CVU"
EXP_MATERIAL,           " WHERE M.ZoneTypeKey = ZT.ZoneTypeKey"
EXP_MATERIAL,           " AND M.Unit = CVU.CodeValueKey"
EXP_MATERIAL,           " %Where"

EXP_MATERIALPRICE,      " SELECT distinct 'MaterialPrice',M.MaterialID,Z.ZoneID,"
EXP_MATERIALPRICE,      " MP.UnitPrice"
EXP_MATERIALPRICE,      " FROM Material M, Zone Z, ZoneType ZT, "
EXP_MATERIALPRICE,      " MaterialPrice MP"
EXP_MATERIALPRICE,      " WHERE M.ZoneTypeKey = ZT.ZoneTypeKey"
EXP_MATERIALPRICE,      " AND M.MaterialKey   = MP.MaterialKey"
EXP_MATERIALPRICE,      " AND ZT.ZoneTypeKey  = Z.ZoneTypeKey"
EXP_MATERIALPRICE,      " AND MP.ZoneKey      = Z.ZoneKey"
EXP_MATERIALPRICE,      " AND MP.UnitPrice > 0.0 "
EXP_MATERIALPRICE,      " %Where"

EXP_COSTSHEET,          " SELECT 'CostSheet',CS.CostSheetID,CS.Description,"
EXP_COSTSHEET,          " CS.ProductionRate,CS.DefaultHoursPerDay,"
EXP_COSTSHEET,          " CS.ProductionGranularity,CS.MarkUpPct,"
EXP_COSTSHEET,          " CS.LaborOverheadPct,CS.EquipmentOverheadPct,"
EXP_COSTSHEET,          " CS.MaterialsOverheadPct"
EXP_COSTSHEET,          " FROM CostSheet CS"
EXP_COSTSHEET,          " WHERE 1=1"
EXP_COSTSHEET,          " %Where"

EXP_CREWUSED,           " SELECT 'CrewUsed',CS.CostSheetID,"
EXP_CREWUSED,           " CU.CostSheetCrewID,CU.Description"
EXP_CREWUSED,           " FROM CostSheet CS, CrewUsed CU"
EXP_CREWUSED,           " WHERE CS.CostSheetKey = CU.CostSheetKey"
EXP_CREWUSED,           " %Where"

EXP_CREWEQUIPMENTUSED,  " SELECT 'CrewEquipmentUsed',CS.CostSheetID,"
EXP_CREWEQUIPMENTUSED,  " CU.CostSheetCrewID,"
EXP_CREWEQUIPMENTUSED,  " E.EquipmentID,CEU.Quantity"
EXP_CREWEQUIPMENTUSED,  " FROM CostSheet CS, CrewUsed CU, CrewEquipmentUsed CEU,"
EXP_CREWEQUIPMENTUSED,  " Equipment E"
EXP_CREWEQUIPMENTUSED,  " WHERE CS.CostSheetKey   = CU.CostSheetKey"
EXP_CREWEQUIPMENTUSED,  " AND CU.CostSheetCrewKey = CEU.CostSheetCrewKey"
EXP_CREWEQUIPMENTUSED,  " AND CEU.EquipmentKey    = E.EquipmentKey"
EXP_CREWEQUIPMENTUSED,  " %Where"

EXP_CREWLABORUSED,      " SELECT 'CrewLaborUsed',CS.CostSheetID,"
EXP_CREWLABORUSED,      " CU.CostSheetCrewID,"
EXP_CREWLABORUSED,      " L.LaborerID,CLU.Quantity"
EXP_CREWLABORUSED,      " FROM CostSheet CS, CrewUsed CU, CrewLaborUsed CLU,"
EXP_CREWLABORUSED,      " Labor L"
EXP_CREWLABORUSED,      " WHERE CS.CostSheetKey   = CU.CostSheetKey"
EXP_CREWLABORUSED,      " AND CU.CostSheetCrewKey = CLU.CostSheetCrewKey"
EXP_CREWLABORUSED,      " AND CLU.LaborerKey      = L.LaborerKey"
EXP_CREWLABORUSED,      " %Where"

EXP_MATERIALUSED,       " SELECT 'MaterialUsed',CS.CostSheetID,"
EXP_MATERIALUSED,       " M.MaterialID,MU.Quantity"
EXP_MATERIALUSED,       " FROM CostSheet CS, MaterialUsed MU, "
EXP_MATERIALUSED,       " Material M"
EXP_MATERIALUSED,       " WHERE CS.CostSheetKey = MU.CostSheetKey"
EXP_MATERIALUSED,       " AND MU.MaterialKey    = M.MaterialKey"
EXP_MATERIALUSED,       " %Where"

EXP_MAJORITEM,          " SELECT 'MajorItem',MI.MajorItemID,MI.SpecYear,"
EXP_MAJORITEM,          " MI.Description, CVU.CodeValueID"
EXP_MAJORITEM,   " , MI.UnitType "
EXP_MAJORITEM,          " FROM MajorItem MI, CodeValue CVU"
EXP_MAJORITEM,          " WHERE MI.CommonUnit = CVU.CodeValueKey"
EXP_MAJORITEM,          " AND MI.SpecYear != NULL"
EXP_MAJORITEM,          " %Where"


EXP_MAJORITEM_NULSY,   " SELECT 'MajorItem',MI.MajorItemID, 'NULL',"
EXP_MAJORITEM_NULSY,   " MI.Description, CVU.CodeValueID"
EXP_MAJORITEM_NULSY,  " , MI.UnitType "
EXP_MAJORITEM_NULSY,   " FROM MajorItem MI, CodeValue CVU"
EXP_MAJORITEM_NULSY,   " WHERE MI.CommonUnit = CVU.CodeValueKey"
EXP_MAJORITEM_NULSY,   " AND MI.SpecYear = NULL"
EXP_MAJORITEM_NULSY,   " %Where"


EXP_MAJORITEMSTDITEM,   " SELECT 'StandardItemMajorItem',"
EXP_MAJORITEMSTDITEM,   " RTRIM(SI.StandardItemNumber) + CHAR(32) + LTRIM(STR(SI.SpecYear)),"
EXP_MAJORITEMSTDITEM,   " MI.MajorItemID + CHAR(32) + LTRIM(STR(MI.SpecYear)) "
EXP_MAJORITEMSTDITEM,   " ,SIMI.QuantityConversionFactor"
EXP_MAJORITEMSTDITEM,   " ,SIMI.PercentofCost"
EXP_MAJORITEMSTDITEM,   " FROM StandardItem SI, StandardItemMajorItem SIMI"
EXP_MAJORITEMSTDITEM,   " , MajorItem MI"
EXP_MAJORITEMSTDITEM,   " WHERE SI.StandardItemKey = SIMI.StandardItemKey"
EXP_MAJORITEMSTDITEM,   " AND SIMI.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMSTDITEM,   " AND MI.SpecYear != NULL"
EXP_MAJORITEMSTDITEM,   " %Where"


EXP_MAJORITEMSTDITEM_NULSY,   " SELECT 'StandardItemMajorItem',"
EXP_MAJORITEMSTDITEM_NULSY,   " RTRIM(SI.StandardItemNumber) + CHAR(32) + LTRIM(STR(SI.SpecYear)),"
EXP_MAJORITEMSTDITEM_NULSY,   " MI.MajorItemID + ' NULL' "
EXP_MAJORITEMSTDITEM_NULSY,   " ,SIMI.QuantityConversionFactor"
EXP_MAJORITEMSTDITEM_NULSY,   " ,SIMI.PercentofCost"
EXP_MAJORITEMSTDITEM_NULSY,   " FROM StandardItem SI, StandardItemMajorItem SIMI"
EXP_MAJORITEMSTDITEM_NULSY,   " , MajorItem MI"
EXP_MAJORITEMSTDITEM_NULSY,   " WHERE SI.StandardItemKey = SIMI.StandardItemKey"
EXP_MAJORITEMSTDITEM_NULSY,   " AND SIMI.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMSTDITEM_NULSY,   " AND MI.SpecYear = NULL"
EXP_MAJORITEMSTDITEM_NULSY,   " %Where"



EXP_MAJORITEMPRICEREG,  " SELECT 'MajorItemPriceRegression',MI.MajorItemID,"
EXP_MAJORITEMPRICEREG,  " MIPR.MedianQuantity,MIPR.MedianQuantityUnitPrice,"
EXP_MAJORITEMPRICEREG,  " MIPR.QuantityAdjustment, MIPR.BaseDate"
EXP_MAJORITEMPRICEREG,  " FROM MajorItemPriceRegression MIPR,"
EXP_MAJORITEMPRICEREG,  " MajorItem MI"
EXP_MAJORITEMPRICEREG,  " WHERE MIPR.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMPRICEREG,  " %Where"
                          
EXP_MAJORITEMPRICEVAR,  " SELECT 'MajorItemPriceVariable',MI.MajorItemID,"
EXP_MAJORITEMPRICEVAR,  " MIPV.QualitativeVariable,MIPV.BaseDate"
EXP_MAJORITEMPRICEVAR,  " FROM MajorItemPriceVariable MIPV,"
EXP_MAJORITEMPRICEVAR,  " MajorItem MI"
EXP_MAJORITEMPRICEVAR,  " WHERE MIPV.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMPRICEVAR,  " %Where"
                          
EXP_MAJORITEMPRICEADJ,  " SELECT 'MajorItemPriceAdjustment',MI.MajorItemID,"
EXP_MAJORITEMPRICEADJ,  " MIPA.QualitativeVariable,MIPA.QualitativeValue,"
EXP_MAJORITEMPRICEADJ,  " MIPA.PriceAdjustment, MIPA.BaseDate"
EXP_MAJORITEMPRICEADJ,  " FROM MajorItemPriceAdjustment MIPA,"
EXP_MAJORITEMPRICEADJ,  " MajorItem MI"
EXP_MAJORITEMPRICEADJ,  " WHERE MIPA.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMPRICEADJ,  " %Where"
                          
EXP_MAJORITEMQTYREG,    " SELECT 'MajorItemQuantityRegression',MI.MajorItemID,"
EXP_MAJORITEMQTYREG,    " MIQR.BaseCoefficient,MIQR.DepthAdjustment,"
EXP_MAJORITEMQTYREG,    " MIQR.WidthAdjustment,MIQR.CrossSectionAdjustment,"
EXP_MAJORITEMQTYREG,    " MIQR.StructureBaseAdjustment,"
EXP_MAJORITEMQTYREG,    " MIQR.StructureWidthAdjustment,"
EXP_MAJORITEMQTYREG,    " MIQR.StructureLengthAdjustment,"
EXP_MAJORITEMQTYREG,    " MIQR.StructureAreaAdjustment, MIQR.BaseDate"
EXP_MAJORITEMQTYREG,    " FROM MajorItemQuantityRegression MIQR,"
EXP_MAJORITEMQTYREG,    " MajorItem MI"
EXP_MAJORITEMQTYREG,    " WHERE MIQR.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMQTYREG,    " %Where"
                          
EXP_MAJORITEMQTYVAR,    " SELECT 'MajorItemQuantityVariable',MI.MajorItemID,"
EXP_MAJORITEMQTYVAR,    " MIQV.QualitativeVariable,MIQV.BaseDate"
EXP_MAJORITEMQTYREG,    " FROM MajorItemQuantityVariable MIQV,"
EXP_MAJORITEMQTYREG,    " MajorItem MI"
EXP_MAJORITEMQTYREG,    " WHERE MIQV.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMQTYREG,    " %Where"
                          
EXP_MAJORITEMQTYADJ,    " SELECT 'MajorItemQuantityAdjustment',MI.MajorItemID,"
EXP_MAJORITEMQTYADJ,    " MIQA.QualitativeVariable,MIQA.VariableValue,"
EXP_MAJORITEMQTYADJ,    " MIQA.QuantityAdjustment,MIQA.BaseDate"
EXP_MAJORITEMQTYREG,    " FROM MajorItemQuantityAdjustment MIQA,"
EXP_MAJORITEMQTYREG,    " MajorItem MI"
EXP_MAJORITEMQTYREG,    " WHERE MIQA.MajorItemKey = MI.MajorItemKey"
EXP_MAJORITEMQTYREG,    " %Where"
                          
EXP_PARAMETRICPROFILE,  " SELECT 'ParametricProfile',PP.ProfileID,"
EXP_PARAMETRICPROFILE,  " PP.Description"
EXP_PARAMETRICPROFILE,  " FROM ParametricProfile PP"
EXP_PARAMETRICPROFILE,  " WHERE 1=1"
EXP_PARAMETRICPROFILE,  " %Where"
                          
EXP_SIGMAJORITEM,       " SELECT 'SignificantMajorItem',PP.ProfileID,"
EXP_SIGMAJORITEM,       " MI.MajorItemID,SMI.PercentofValue,"
EXP_SIGMAJORITEM,       " SMI.PercentofValueLock"
EXP_SIGMAJORITEM,       " FROM ParametricProfile PP, MajorItem MI,"
EXP_SIGMAJORITEM,       " SignificantMajorItem SMI"
EXP_SIGMAJORITEM,       " WHERE PP.ProfileKey = SMI.ProfileKey"
EXP_SIGMAJORITEM,       " AND SMI.MajorItemKey = MI.MajorItemKey"
EXP_SIGMAJORITEM,       " %Where"


EXP_PEMETHAVG,          " SELECT 'PEMETHAverage',"
EXP_PEMETHAVG,          " SI.StandardItemNumber,PA.ImportDate,"
EXP_PEMETHAVG,          " AT.AreaTypeID,PA.FifthPercentile,"
EXP_PEMETHAVG,          " PA.TwentyFifthPercentile,PA.FiftiethPercentile,"
EXP_PEMETHAVG,          " PA.SeventyFifthPercentile,PA.NinetyFifthPercentile"
EXP_PEMETHAVG,          " FROM PEMETHAverage PA, StandardItem SI,"
EXP_PEMETHAVG,          " AreaType AT"
EXP_PEMETHAVG,          " WHERE PA.StandardItemKey = SI.StandardItemKey"
EXP_PEMETHAVG,          " AND PA.AreaTypeKey = AT.AreaTypeKey"
EXP_PEMETHAVG,          " %Where"

EXP_WAUP,               " SELECT 'WeightedAverageUnitPrice',"
EXP_WAUP,               " SI.StandardItemNumber,WAUP.ImportDate,"
EXP_WAUP,               " A.AreaID,WAUP.QuantityLevel,CVW.CodeValueID,"
EXP_WAUP,               " WAUP.WeightedAverageUnitPrice"
EXP_WAUP,               " FROM WeightedAverageUnitPrice WAUP,"
EXP_WAUP,               " StandardItem SI, Area A, CodeValue CVW,"
EXP_WAUP,               " PEMETHAverage PA"
EXP_WAUP,               " WHERE WAUP.StandardItemKey = SI.StandardItemKey"
EXP_WAUP,               " AND WAUP.StandardItemKey = PA.StandardItemKey"
EXP_WAUP,               " AND WAUP.ImportDate = PA.ImportDate"
EXP_WAUP,               " AND PA.AreaTypeKey = A.AreaTypeKey"
EXP_WAUP,               " AND WAUP.AreaKey = A.AreaKey"
EXP_WAUP,               " AND WAUP.WorkType = CVW.CodeValueKey"
EXP_WAUP,               " %Where"

EXP_PEMETHREG,          " SELECT 'PEMETHRegression',"
EXP_PEMETHREG,          " SI.StandardItemNumber,PR.ImportDate,"
EXP_PEMETHREG,          " AT.AreaTypeID,PR.MinimumQuantity,"
EXP_PEMETHREG,          " PR.MaximumQuantity,PR.MedianQuantity,"
EXP_PEMETHREG,          " PR.BaseUnitPrice,PR.AnnualInflation,"
EXP_PEMETHREG,          " PR.QuantityAdjustment"
EXP_PEMETHREG,          " FROM PEMETHRegression PR, StandardItem SI,"
EXP_PEMETHREG,          " AreaType AT"
EXP_PEMETHREG,          " WHERE PR.StandardItemKey = SI.StandardItemKey"
EXP_PEMETHREG,          " AND PR.AreaTypeKey = AT.AreaTypeKey"
EXP_PEMETHREG,          " %Where"

EXP_SEASONADJ,          " SELECT 'SeasonAdjustment',"
EXP_SEASONADJ,          " SI.StandardItemNumber,SA.ImportDate,"
EXP_SEASONADJ,          " SA.Season,SA.Adjustment"
EXP_SEASONADJ,          " FROM SeasonAdjustment SA, StandardItem SI,"
EXP_SEASONADJ,          " PEMETHRegression PR"
EXP_SEASONADJ,          " WHERE PR.StandardItemKey = SA.StandardItemKey"
EXP_SEASONADJ,          " AND PR.ImportDate = SA.ImportDate"
EXP_SEASONADJ,          " AND SA.StandardItemKey = SI.StandardItemKey"
EXP_SEASONADJ,          " %Where"

EXP_WORKTYPEADJ,        " SELECT 'WorkTypeAdjustment',"
EXP_WORKTYPEADJ,        " SI.StandardItemNumber,WTA.ImportDate,"
EXP_WORKTYPEADJ,        " CVW.CodeValueID,WTA.Adjustment"
EXP_WORKTYPEADJ,        " FROM WorkTypeAdjustment WTA, StandardItem SI,"
EXP_WORKTYPEADJ,        " PEMETHRegression PR, CodeValue CVW"
EXP_WORKTYPEADJ,        " WHERE PR.StandardItemKey = WTA.StandardItemKey"
EXP_WORKTYPEADJ,        " AND PR.ImportDate = WTA.ImportDate"
EXP_WORKTYPEADJ,        " AND WTA.StandardItemKey = SI.StandardItemKey"
EXP_WORKTYPEADJ,        " AND WTA.WorkType = CVW.CodeValueKey"
EXP_WORKTYPEADJ,        " %Where"

EXP_AREAADJ,            " SELECT 'AreaAdjustment',"
EXP_AREAADJ,            " SI.StandardItemNumber,AA.ImportDate,"
EXP_AREAADJ,            " A.AreaID,AA.Adjustment"
EXP_AREAADJ,            " FROM AreaAdjustment AA, StandardItem SI,"
EXP_AREAADJ,            " PEMETHRegression PR, Area A"
EXP_AREAADJ,            " WHERE PR.StandardItemKey = AA.StandardItemKey"
EXP_AREAADJ,            " AND PR.ImportDate = AA.ImportDate"
EXP_AREAADJ,            " AND AA.StandardItemKey = SI.StandardItemKey"
EXP_AREAADJ,            " AND PR.AreaTypeKey = A.AreaTypeKey"
EXP_AREAADJ,            " AND AA.AreaKey = A.AreaKey"
EXP_AREAADJ,            " %Where"

EXP_PROGRAM,            " SELECT 'Program',P.ProgramID,P.Description,"
EXP_PROGRAM,            " P.StartDate,P.EndDate,P.TotalCost,"
EXP_PROGRAM,            " P.TotalAdjustedForInflation"
EXP_PROGRAM,            " FROM Program P"
EXP_PROGRAM,            " WHERE 1=1"
EXP_PROGRAM,            " %Where"

EXP_PROGRAMFUND,        " SELECT 'ProgramFund',P.ProgramID,F.FundID,"
EXP_PROGRAMFUND,        " PF.PercentFunded,PF.AmountFunded"
EXP_PROGRAMFUND,        " FROM Program P, ProgramFund PF, Fund F"
EXP_PROGRAMFUND,        " WHERE P.ProgramKey = PF.ProgramKey"
EXP_PROGRAMFUND,        " AND PF.FundKey = F.FundKey"
EXP_PROGRAMFUND,        " %Where"

EXP_PROGRAMUSER,        " SELECT 'ProgramUser',P.ProgramID,PU.UserID,"
EXP_PROGRAMUSER,        " PU.AccessPrivilege"
EXP_PROGRAMUSER,        " FROM Program P, ProgramUser PU"
EXP_PROGRAMUSER,        " WHERE P.ProgramKey = PU.ProgramKey"
EXP_PROGRAMUSER,        " %Where"

EXP_PROGRAMJOB,         " SELECT 'ProgramJob',J.JobID,P.ProgramID,"
EXP_PROGRAMJOB,         " PJ.LettingDate,PJ.WorkBeginDate,PJ.WorkEndDate,"
EXP_PROGRAMJOB,         " PJ.Priority,IP.InflationPredictionID,"
EXP_PROGRAMJOB,         " PJ.EstimateTotalAdjForInflation"
EXP_PROGRAMJOB,         " FROM Program P, ProgramJob PJ, Job J,"
EXP_PROGRAMJOB,         " InflationPrediction IP"
EXP_PROGRAMJOB,         " WHERE P.ProgramKey = PJ.ProgramKey"
EXP_PROGRAMJOB,         " AND PJ.InflationPredictionKey = IP.InflationPredictionKey"
EXP_PROGRAMJOB,         " AND PJ.JobKey = J.JobKey"
EXP_PROGRAMJOB,         " %Where"

EXP_PROGRAMJOBDEPEND,   " SELECT 'ProgramJobDependency',"
EXP_PROGRAMJOBDEPEND,   " JP.JobID,JS.JobID,PJD.Link,PJD.Lag,PJD.Delay"
EXP_PROGRAMJOBDEPEND,   " FROM Program P, ProgramJobDependency PJD,"
EXP_PROGRAMJOBDEPEND,   " ProgramJob PJ, Job JP, Job JS"
EXP_PROGRAMJOBDEPEND,   " WHERE P.ProgramKey = PJ.ProgramKey"
EXP_PROGRAMJOBDEPEND,   " AND (PJ.JobKey = PJD.SuccessorJobKey"
EXP_PROGRAMJOBDEPEND,   "   OR PJ.JobKey = PJD.PredecessorJobKey)"
EXP_PROGRAMJOBDEPEND,   " AND PJD.SuccessorJobKey = JS.JobKey"
EXP_PROGRAMJOBDEPEND,   " AND PJD.PredecessorJobKey = JP.JobKey"
EXP_PROGRAMJOBDEPEND,   " %Where"

EXP_INFLATIONPRED,      " SELECT DISTINCT 'InflationPrediction',"
EXP_INFLATIONPRED,      " IP.InflationPredictionID,"
EXP_INFLATIONPRED,      " IP.InitialPrediction,IP.Comment"
EXP_INFLATIONPRED,      " FROM InflationPrediction IP, Program P,"
EXP_INFLATIONPRED,      " ProgramJob PJ"
EXP_INFLATIONPRED,      " WHERE P.ProgramKey = PJ.ProgramKey"
EXP_INFLATIONPRED,      " AND PJ.InflationPredictionKey = IP.InflationPredictionKey"
EXP_INFLATIONPRED,      " %Where"

EXP_INFLATIONCHANGE,    " SELECT DISTINCT 'InflationChange',"
EXP_INFLATIONCHANGE,    " IP.InflationPredictionID,"
EXP_INFLATIONCHANGE,    " IC.ChangeDate,IC.InflationRate,IC.Comment"
EXP_INFLATIONCHANGE,    " FROM InflationPrediction IP, Program P,"
EXP_INFLATIONCHANGE,    " ProgramJob PJ, InflationChange IC"
EXP_INFLATIONCHANGE,    " WHERE P.ProgramKey = PJ.ProgramKey"
EXP_INFLATIONCHANGE,    " AND PJ.InflationPredictionKey = IP.InflationPredictionKey"
EXP_INFLATIONCHANGE,    " AND IP.InflationPredictionKey = IC.InflationPredictionKey"
EXP_INFLATIONCHANGE,    " %Where"

EXP_STANDARDITEM,       " SELECT 'StandardItem',SI.StandardItemNumber,"
EXP_STANDARDITEM,       " SI.SpecYear,SI.ShortDescription,"
EXP_STANDARDITEM,       " SI.LongDescription,CVU.CodeValueID,"
EXP_STANDARDITEM,       " SI.LumpSum,SI.DefaultProductionRate,"
EXP_STANDARDITEM,       " SI.DefaultStartTime,SI.RoundingPrecision, SI.UnitType"
EXP_STANDARDITEM,       " FROM StandardItem SI, CodeValue CVU"
EXP_STANDARDITEM,       " WHERE SI.Unit = CVU.CodeValueKey"
EXP_STANDARDITEM,       " %Where"

EXP_STANDARDITEMDEPEND, "/* DssImp EXP_STANDARDITEMDEPEN */"
EXP_STANDARDITEMDEPEND, " SELECT 'StandardItemDependency',"
EXP_STANDARDITEMDEPEND, " SIP.StandardItemNumber + CONVERT (varchar (4), SIP.SpecYear),"
EXP_STANDARDITEMDEPEND, " SIS.StandardItemNumber + CONVERT (varchar (4), SIS.SpecYear),"
EXP_STANDARDITEMDEPEND, " SID.Link,SID.Lag"
EXP_STANDARDITEMDEPEND, " FROM StandardItem SIS, StandardItem SIP,"
EXP_STANDARDITEMDEPEND, " StandardItemDependency SID, StandardItem SI"
EXP_STANDARDITEMDEPEND, " WHERE SIS.StandardItemKey = SID.SuccessorItemKey"
EXP_STANDARDITEMDEPEND, " AND SIP.StandardItemKey = SID.PredecessorItemKey"
EXP_STANDARDITEMDEPEND, " AND SI.StandardItemKey = SIP.StandardItemKey"
EXP_STANDARDITEMDEPEND, " %Where"
                          
EXP_VENDOR,             " SELECT 'Vendor',V.VendorID,V.ShortName,V.Name,"
EXP_VENDOR,             " CVT.CodeValueID,CVC.CodeValueID,CVD.CodeValueID"
EXP_VENDOR,             " FROM Vendor V, CodeValue CVT, CodeValue CVC,"
EXP_VENDOR,             " CodeValue CVD"
EXP_VENDOR,             " WHERE V.Type = CVT.CodeValueKey"
EXP_VENDOR,             " AND V.Certification = CVC.CodeValueKey"
EXP_VENDOR,             " AND V.DBEClassification = CVD.CodeValueKey"
EXP_VENDOR,             " %Where"
                          
EXP_VENDORADDRESS,      " SELECT 'VendorAddress',V.VendorID,"
EXP_VENDORADDRESS,      " VA.AddressSequenceNumber,VA.Address,VA.City,"
EXP_VENDORADDRESS,      " VA.State,VA.ZipCode,VA.PhoneNumber,VA.Location"
EXP_VENDORADDRESS,      " FROM Vendor V, VendorAddress VA"
EXP_VENDORADDRESS,      " WHERE V.VendorKey = VA.VendorKey"
EXP_VENDORADDRESS,      " %Where"

EXP_VENDORCLASS,        " SELECT 'VendorClassification',V.VendorID,"
EXP_VENDORCLASS,        " CVC.CodeValueID"
EXP_VENDORCLASS,        " FROM Vendor V, VendorClassification VC,"
EXP_VENDORCLASS,        " CodeValue CVC"
EXP_VENDORCLASS,        " WHERE V.VendorKey = VC.VendorKey"
EXP_VENDORCLASS,        " AND CVC.CodeValueKey = VC.VendorClassification"
EXP_VENDORCLASS,        " %Where"

:FORMAT format.bin
COPYBIDDER+INDV_SELECT,  "String", "String", "String", "Number,...."


// EXP_MAJORITEM,          "String", "String" , "String", "String", "Number", "Number"
EXP_MAJORITEM,          "String", "String" , "String", "String", "String", "String"


